
RTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005068  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005238  08005238  00015238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b4  080052b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080052b4  080052b4  000152b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052bc  080052bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052c0  080052c0  000152c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080052c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004058  20000010  080052d4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004068  080052d4  00024068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce3e  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002442  00000000  00000000  0002cec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0002f308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000089a  00000000  00000000  0002fe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c08  00000000  00000000  000306da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7f9  00000000  00000000  000522e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfd56  00000000  00000000  00060adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cc0  00000000  00000000  00130834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001334f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005220 	.word	0x08005220

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08005220 	.word	0x08005220

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000002c 	.word	0x2000002c
 800053c:	20000080 	.word	0x20000080

08000540 <main>:

/* USER CODE END 0 */

/* Main program entry point */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  HAL_Init();
 8000544:	f000 ff0c 	bl	8001360 <HAL_Init>
  SystemClock_Config();
 8000548:	f000 fc1e 	bl	8000d88 <SystemClock_Config>
  MX_GPIO_Init();
 800054c:	f000 fcb4 	bl	8000eb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000550:	f000 fc88 	bl	8000e64 <MX_USART2_UART_Init>

  /* Initialize mutexes */
  xDriverUpButtonMutex = xSemaphoreCreateMutex();
 8000554:	2001      	movs	r0, #1
 8000556:	f002 fcac 	bl	8002eb2 <xQueueCreateMutex>
 800055a:	4603      	mov	r3, r0
 800055c:	4a1f      	ldr	r2, [pc, #124]	; (80005dc <main+0x9c>)
 800055e:	6013      	str	r3, [r2, #0]
  xDriverDownButtonMutex = xSemaphoreCreateMutex();
 8000560:	2001      	movs	r0, #1
 8000562:	f002 fca6 	bl	8002eb2 <xQueueCreateMutex>
 8000566:	4603      	mov	r3, r0
 8000568:	4a1d      	ldr	r2, [pc, #116]	; (80005e0 <main+0xa0>)
 800056a:	6013      	str	r3, [r2, #0]

  /* Initialize semaphores */
  xupperLimitReachedSemaphore = xSemaphoreCreateBinary();
 800056c:	2203      	movs	r2, #3
 800056e:	2100      	movs	r1, #0
 8000570:	2001      	movs	r0, #1
 8000572:	f002 fc2b 	bl	8002dcc <xQueueGenericCreate>
 8000576:	4603      	mov	r3, r0
 8000578:	4a1a      	ldr	r2, [pc, #104]	; (80005e4 <main+0xa4>)
 800057a:	6013      	str	r3, [r2, #0]
  xlowerLimitReachedSemaphore = xSemaphoreCreateBinary();
 800057c:	2203      	movs	r2, #3
 800057e:	2100      	movs	r1, #0
 8000580:	2001      	movs	r0, #1
 8000582:	f002 fc23 	bl	8002dcc <xQueueGenericCreate>
 8000586:	4603      	mov	r3, r0
 8000588:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <main+0xa8>)
 800058a:	6013      	str	r3, [r2, #0]
  xwindowLockSemaphore = xSemaphoreCreateBinary();
 800058c:	2203      	movs	r2, #3
 800058e:	2100      	movs	r1, #0
 8000590:	2001      	movs	r0, #1
 8000592:	f002 fc1b 	bl	8002dcc <xQueueGenericCreate>
 8000596:	4603      	mov	r3, r0
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <main+0xac>)
 800059a:	6013      	str	r3, [r2, #0]
  xjamDetectedSemaphore = xSemaphoreCreateBinary();
 800059c:	2203      	movs	r2, #3
 800059e:	2100      	movs	r1, #0
 80005a0:	2001      	movs	r0, #1
 80005a2:	f002 fc13 	bl	8002dcc <xQueueGenericCreate>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <main+0xb0>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* Initialize queue */
  xQueue = xQueueCreate(1, sizeof(TaskHandle_t));
 80005ac:	2200      	movs	r2, #0
 80005ae:	2104      	movs	r1, #4
 80005b0:	2001      	movs	r0, #1
 80005b2:	f002 fc0b 	bl	8002dcc <xQueueGenericCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <main+0xb4>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* Create tasks */
  createTasks();
 80005bc:	f000 f81e 	bl	80005fc <createTasks>

  HAL_GPIO_WritePin(GPIOB, Motor_Pin_1, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <main+0xb8>)
 80005c8:	f001 f9fa 	bl	80019c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, Motor_Pin_2, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2120      	movs	r1, #32
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <main+0xb8>)
 80005d2:	f001 f9f5 	bl	80019c0 <HAL_GPIO_WritePin>

  vTaskStartScheduler();
 80005d6:	f003 fb7d 	bl	8003cd4 <vTaskStartScheduler>

  while (1)
 80005da:	e7fe      	b.n	80005da <main+0x9a>
 80005dc:	20000304 	.word	0x20000304
 80005e0:	20000308 	.word	0x20000308
 80005e4:	200002f4 	.word	0x200002f4
 80005e8:	200002f8 	.word	0x200002f8
 80005ec:	200002fc 	.word	0x200002fc
 80005f0:	20000300 	.word	0x20000300
 80005f4:	2000030c 	.word	0x2000030c
 80005f8:	40020400 	.word	0x40020400

080005fc <createTasks>:
  {
    // Infinite loop
  }
}

void createTasks(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af02      	add	r7, sp, #8
  if (xupperLimitReachedSemaphore && xlowerLimitReachedSemaphore &&
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <createTasks+0x9c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d042      	beq.n	8000690 <createTasks+0x94>
 800060a:	4b24      	ldr	r3, [pc, #144]	; (800069c <createTasks+0xa0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d03e      	beq.n	8000690 <createTasks+0x94>
 8000612:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <createTasks+0xa4>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d03a      	beq.n	8000690 <createTasks+0x94>
      xwindowLockSemaphore && xjamDetectedSemaphore) {
 800061a:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <createTasks+0xa8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d036      	beq.n	8000690 <createTasks+0x94>

    xTaskCreate(Set_Upper_Limit, "setupper", 256, NULL, 4, NULL);
 8000622:	2300      	movs	r3, #0
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2304      	movs	r3, #4
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000630:	491d      	ldr	r1, [pc, #116]	; (80006a8 <createTasks+0xac>)
 8000632:	481e      	ldr	r0, [pc, #120]	; (80006ac <createTasks+0xb0>)
 8000634:	f003 f953 	bl	80038de <xTaskCreate>
    xTaskCreate(Set_Lower_Limit, "setlower", 256, NULL, 4, NULL);
 8000638:	2300      	movs	r3, #0
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	2304      	movs	r3, #4
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2300      	movs	r3, #0
 8000642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000646:	491a      	ldr	r1, [pc, #104]	; (80006b0 <createTasks+0xb4>)
 8000648:	481a      	ldr	r0, [pc, #104]	; (80006b4 <createTasks+0xb8>)
 800064a:	f003 f948 	bl	80038de <xTaskCreate>
    xTaskCreate(Set_Window_Lock, "setwindowlock", 256, NULL, 4, NULL);
 800064e:	2300      	movs	r3, #0
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	2304      	movs	r3, #4
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2300      	movs	r3, #0
 8000658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800065c:	4916      	ldr	r1, [pc, #88]	; (80006b8 <createTasks+0xbc>)
 800065e:	4817      	ldr	r0, [pc, #92]	; (80006bc <createTasks+0xc0>)
 8000660:	f003 f93d 	bl	80038de <xTaskCreate>
    xTaskCreate(Set_Jam_Detected, "setjamdetected", 256, NULL, 4, NULL);
 8000664:	2300      	movs	r3, #0
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	2304      	movs	r3, #4
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2300      	movs	r3, #0
 800066e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000672:	4913      	ldr	r1, [pc, #76]	; (80006c0 <createTasks+0xc4>)
 8000674:	4813      	ldr	r0, [pc, #76]	; (80006c4 <createTasks+0xc8>)
 8000676:	f003 f932 	bl	80038de <xTaskCreate>
    xTaskCreate(Button_Task, "Button Task", 256, NULL, 1, NULL);
 800067a:	2300      	movs	r3, #0
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2301      	movs	r3, #1
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000688:	490f      	ldr	r1, [pc, #60]	; (80006c8 <createTasks+0xcc>)
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <createTasks+0xd0>)
 800068c:	f003 f927 	bl	80038de <xTaskCreate>
  }
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200002f4 	.word	0x200002f4
 800069c:	200002f8 	.word	0x200002f8
 80006a0:	200002fc 	.word	0x200002fc
 80006a4:	20000300 	.word	0x20000300
 80006a8:	08005238 	.word	0x08005238
 80006ac:	08000c71 	.word	0x08000c71
 80006b0:	08005244 	.word	0x08005244
 80006b4:	08000c99 	.word	0x08000c99
 80006b8:	08005250 	.word	0x08005250
 80006bc:	08000cc1 	.word	0x08000cc1
 80006c0:	08005260 	.word	0x08005260
 80006c4:	08000cf5 	.word	0x08000cf5
 80006c8:	08005270 	.word	0x08005270
 80006cc:	080006d1 	.word	0x080006d1

080006d0 <Button_Task>:

void Button_Task(void *pvParameters) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	; 0x30
 80006d4:	af04      	add	r7, sp, #16
 80006d6:	6078      	str	r0, [r7, #4]
    // Define variables to keep track of button states and times
    TickType_t xLastWakeTime;
    const TickType_t xDelay = pdMS_TO_TICKS(1); // delay of 1 ms
 80006d8:	2301      	movs	r3, #1
 80006da:	61fb      	str	r3, [r7, #28]
    xLastWakeTime = xTaskGetTickCount();
 80006dc:	f003 fc04 	bl	8003ee8 <xTaskGetTickCount>
 80006e0:	61b8      	str	r0, [r7, #24]

    int Driver_Up_Pressed = 0, Driver_Down_Pressed = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
    int Passenger_Up_Pressed = 0, Passenger_Down_Pressed = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]

    while (1) {
        Handle_Button_Press(GPIOA, Driver_Up_Button_Pin, xDriverUpButtonMutex,
 80006f2:	4b21      	ldr	r3, [pc, #132]	; (8000778 <Button_Task+0xa8>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4920      	ldr	r1, [pc, #128]	; (800077c <Button_Task+0xac>)
 80006fc:	9103      	str	r1, [sp, #12]
 80006fe:	4920      	ldr	r1, [pc, #128]	; (8000780 <Button_Task+0xb0>)
 8000700:	9102      	str	r1, [sp, #8]
 8000702:	4920      	ldr	r1, [pc, #128]	; (8000784 <Button_Task+0xb4>)
 8000704:	9101      	str	r1, [sp, #4]
 8000706:	4920      	ldr	r1, [pc, #128]	; (8000788 <Button_Task+0xb8>)
 8000708:	9100      	str	r1, [sp, #0]
 800070a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070e:	481f      	ldr	r0, [pc, #124]	; (800078c <Button_Task+0xbc>)
 8000710:	f000 f85a 	bl	80007c8 <Handle_Button_Press>
                          &Driver_Up_Pressed, Driver_Up_Auto, Driver_Up_Manual,
                          &xdrivUpAutoHandle, &xdrivUpManuHandle);
        Handle_Button_Press(GPIOA, Driver_Down_Button_Pin, xDriverDownButtonMutex,
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <Button_Task+0xc0>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	491d      	ldr	r1, [pc, #116]	; (8000794 <Button_Task+0xc4>)
 800071e:	9103      	str	r1, [sp, #12]
 8000720:	491d      	ldr	r1, [pc, #116]	; (8000798 <Button_Task+0xc8>)
 8000722:	9102      	str	r1, [sp, #8]
 8000724:	491d      	ldr	r1, [pc, #116]	; (800079c <Button_Task+0xcc>)
 8000726:	9101      	str	r1, [sp, #4]
 8000728:	491d      	ldr	r1, [pc, #116]	; (80007a0 <Button_Task+0xd0>)
 800072a:	9100      	str	r1, [sp, #0]
 800072c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000730:	4816      	ldr	r0, [pc, #88]	; (800078c <Button_Task+0xbc>)
 8000732:	f000 f849 	bl	80007c8 <Handle_Button_Press>
                          &Driver_Down_Pressed, Driver_Down_Auto, Driver_Down_Manual,
                          &xdrivDownAutoHandle, &xdrivDownManuHandle);
        Handle_Button_Press(GPIOB, Passenger_Up_Button_Pin, NULL,
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	4a1a      	ldr	r2, [pc, #104]	; (80007a4 <Button_Task+0xd4>)
 800073c:	9203      	str	r2, [sp, #12]
 800073e:	4a1a      	ldr	r2, [pc, #104]	; (80007a8 <Button_Task+0xd8>)
 8000740:	9202      	str	r2, [sp, #8]
 8000742:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <Button_Task+0xdc>)
 8000744:	9201      	str	r2, [sp, #4]
 8000746:	4a1a      	ldr	r2, [pc, #104]	; (80007b0 <Button_Task+0xe0>)
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000750:	4818      	ldr	r0, [pc, #96]	; (80007b4 <Button_Task+0xe4>)
 8000752:	f000 f839 	bl	80007c8 <Handle_Button_Press>
                          &Passenger_Up_Pressed, Passenger_Up_Auto, Passenger_Up_Manual,
                          &xpassUpAutoHandle, &xpassUpManuHandle);
        Handle_Button_Press(GPIOB, Passenger_Down_Button_Pin, NULL,
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <Button_Task+0xe8>)
 800075c:	9203      	str	r2, [sp, #12]
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <Button_Task+0xec>)
 8000760:	9202      	str	r2, [sp, #8]
 8000762:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <Button_Task+0xf0>)
 8000764:	9201      	str	r2, [sp, #4]
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <Button_Task+0xf4>)
 8000768:	9200      	str	r2, [sp, #0]
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000770:	4810      	ldr	r0, [pc, #64]	; (80007b4 <Button_Task+0xe4>)
 8000772:	f000 f829 	bl	80007c8 <Handle_Button_Press>
        Handle_Button_Press(GPIOA, Driver_Up_Button_Pin, xDriverUpButtonMutex,
 8000776:	e7bc      	b.n	80006f2 <Button_Task+0x22>
 8000778:	20000304 	.word	0x20000304
 800077c:	200002d8 	.word	0x200002d8
 8000780:	200002d4 	.word	0x200002d4
 8000784:	080008fd 	.word	0x080008fd
 8000788:	080008bd 	.word	0x080008bd
 800078c:	40020000 	.word	0x40020000
 8000790:	20000308 	.word	0x20000308
 8000794:	200002e0 	.word	0x200002e0
 8000798:	200002dc 	.word	0x200002dc
 800079c:	08000985 	.word	0x08000985
 80007a0:	08000945 	.word	0x08000945
 80007a4:	200002e8 	.word	0x200002e8
 80007a8:	200002e4 	.word	0x200002e4
 80007ac:	08000a0d 	.word	0x08000a0d
 80007b0:	080009cd 	.word	0x080009cd
 80007b4:	40020400 	.word	0x40020400
 80007b8:	200002f0 	.word	0x200002f0
 80007bc:	200002ec 	.word	0x200002ec
 80007c0:	08000a95 	.word	0x08000a95
 80007c4:	08000a55 	.word	0x08000a55

080007c8 <Handle_Button_Press>:
}

void Handle_Button_Press(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
                       xSemaphoreHandle xMutex, int *PressedState,
                       TaskFunction_t autoTask, TaskFunction_t manuTask,
                       TaskHandle_t *autoHandle, TaskHandle_t *manuHandle) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	460b      	mov	r3, r1
 80007d6:	817b      	strh	r3, [r7, #10]
    if (xMutex) xSemaphoreTake(xMutex, portMAX_DELAY);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d004      	beq.n	80007e8 <Handle_Button_Press+0x20>
 80007de:	f04f 31ff 	mov.w	r1, #4294967295
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f002 fdea 	bl	80033bc <xQueueSemaphoreTake>
    if (!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) {
 80007e8:	897b      	ldrh	r3, [r7, #10]
 80007ea:	4619      	mov	r1, r3
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	f001 f8cf 	bl	8001990 <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d150      	bne.n	800089a <Handle_Button_Press+0xd2>
        if (!(*PressedState)) {
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d14c      	bne.n	800089a <Handle_Button_Press+0xd2>
            *PressedState = 1;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	2201      	movs	r2, #1
 8000804:	601a      	str	r2, [r3, #0]
            vTaskDelay(pdMS_TO_TICKS(DEBOUNCE_DELAY_MS));
 8000806:	2032      	movs	r0, #50	; 0x32
 8000808:	f003 fa30 	bl	8003c6c <vTaskDelay>
            if (!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) {
 800080c:	897b      	ldrh	r3, [r7, #10]
 800080e:	4619      	mov	r1, r3
 8000810:	68f8      	ldr	r0, [r7, #12]
 8000812:	f001 f8bd 	bl	8001990 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d13b      	bne.n	8000894 <Handle_Button_Press+0xcc>
                TickType_t xLastWakeTime = xTaskGetTickCount();
 800081c:	f003 fb64 	bl	8003ee8 <xTaskGetTickCount>
 8000820:	6178      	str	r0, [r7, #20]
                while ((!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) && ((xTaskGetTickCount() - xLastWakeTime) < pdMS_TO_TICKS(LONG_PRESS_DELAY_MS))) {
 8000822:	e002      	b.n	800082a <Handle_Button_Press+0x62>
                    vTaskDelay(pdMS_TO_TICKS(1));
 8000824:	2001      	movs	r0, #1
 8000826:	f003 fa21 	bl	8003c6c <vTaskDelay>
                while ((!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) && ((xTaskGetTickCount() - xLastWakeTime) < pdMS_TO_TICKS(LONG_PRESS_DELAY_MS))) {
 800082a:	897b      	ldrh	r3, [r7, #10]
 800082c:	4619      	mov	r1, r3
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	f001 f8ae 	bl	8001990 <HAL_GPIO_ReadPin>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d107      	bne.n	800084a <Handle_Button_Press+0x82>
 800083a:	f003 fb55 	bl	8003ee8 <xTaskGetTickCount>
 800083e:	4602      	mov	r2, r0
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000848:	d3ec      	bcc.n	8000824 <Handle_Button_Press+0x5c>
                }
                if ((!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)) && ((xTaskGetTickCount() - xLastWakeTime) >= pdMS_TO_TICKS(LONG_PRESS_DELAY_MS))) {
 800084a:	897b      	ldrh	r3, [r7, #10]
 800084c:	4619      	mov	r1, r3
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f001 f89e 	bl	8001990 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d112      	bne.n	8000880 <Handle_Button_Press+0xb8>
 800085a:	f003 fb45 	bl	8003ee8 <xTaskGetTickCount>
 800085e:	4602      	mov	r2, r0
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000868:	d30a      	bcc.n	8000880 <Handle_Button_Press+0xb8>
                    xTaskCreate(manuTask, "ManualTask", 128, NULL, 2, manuHandle);
 800086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	2302      	movs	r3, #2
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2300      	movs	r3, #0
 8000874:	2280      	movs	r2, #128	; 0x80
 8000876:	490f      	ldr	r1, [pc, #60]	; (80008b4 <Handle_Button_Press+0xec>)
 8000878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800087a:	f003 f830 	bl	80038de <xTaskCreate>
 800087e:	e009      	b.n	8000894 <Handle_Button_Press+0xcc>
                } else {
                    xTaskCreate(autoTask, "AutoTask", 128, NULL, 2, autoHandle);
 8000880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	2302      	movs	r3, #2
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2300      	movs	r3, #0
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	490a      	ldr	r1, [pc, #40]	; (80008b8 <Handle_Button_Press+0xf0>)
 800088e:	6a38      	ldr	r0, [r7, #32]
 8000890:	f003 f825 	bl	80038de <xTaskCreate>
                }
            }
            *PressedState = 0;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
        }
    }
    if (xMutex) xSemaphoreGive(xMutex);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d005      	beq.n	80008ac <Handle_Button_Press+0xe4>
 80008a0:	2300      	movs	r3, #0
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f002 fb1c 	bl	8002ee4 <xQueueGenericSend>
}
 80008ac:	bf00      	nop
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	0800527c 	.word	0x0800527c
 80008b8:	08005288 	.word	0x08005288

080008bc <Driver_Up_Auto>:


/* DRIVER TASKS */
void Driver_Up_Auto(void *pvParameters) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af02      	add	r7, sp, #8
 80008c2:	6078      	str	r0, [r7, #4]
	isPassenger = false;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <Driver_Up_Auto+0x28>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
    Handle_Window_Movement(Motor_Move_Forward, &upperLimitReached, &lowerLimitReached, &jamDetected, xdrivUpAutoHandle);
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <Driver_Up_Auto+0x2c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <Driver_Up_Auto+0x30>)
 80008d2:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <Driver_Up_Auto+0x34>)
 80008d4:	4907      	ldr	r1, [pc, #28]	; (80008f4 <Driver_Up_Auto+0x38>)
 80008d6:	4808      	ldr	r0, [pc, #32]	; (80008f8 <Driver_Up_Auto+0x3c>)
 80008d8:	f000 f900 	bl	8000adc <Handle_Window_Movement>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200002d2 	.word	0x200002d2
 80008e8:	200002d4 	.word	0x200002d4
 80008ec:	200002c8 	.word	0x200002c8
 80008f0:	200002d1 	.word	0x200002d1
 80008f4:	200002d0 	.word	0x200002d0
 80008f8:	08000d1d 	.word	0x08000d1d

080008fc <Driver_Up_Manual>:

void Driver_Up_Manual(void *pvParameters) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af02      	add	r7, sp, #8
 8000902:	6078      	str	r0, [r7, #4]
	isPassenger = false;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <Driver_Up_Manual+0x30>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
    Handle_Manual_Movement(GPIOA, Driver_Up_Button_Pin, Motor_Move_Forward, &upperLimitReached, &jamDetected, xdrivUpManuHandle);
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <Driver_Up_Manual+0x34>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <Driver_Up_Manual+0x38>)
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <Driver_Up_Manual+0x3c>)
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <Driver_Up_Manual+0x40>)
 8000918:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800091c:	4808      	ldr	r0, [pc, #32]	; (8000940 <Driver_Up_Manual+0x44>)
 800091e:	f000 f93f 	bl	8000ba0 <Handle_Manual_Movement>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200002d2 	.word	0x200002d2
 8000930:	200002d8 	.word	0x200002d8
 8000934:	200002c8 	.word	0x200002c8
 8000938:	200002d0 	.word	0x200002d0
 800093c:	08000d1d 	.word	0x08000d1d
 8000940:	40020000 	.word	0x40020000

08000944 <Driver_Down_Auto>:

void Driver_Down_Auto(void *pvParameters) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af02      	add	r7, sp, #8
 800094a:	6078      	str	r0, [r7, #4]
	isPassenger = false;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <Driver_Down_Auto+0x28>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
    Handle_Window_Movement(Motor_Move_Backward, &lowerLimitReached, &upperLimitReached, &jamDetected, xdrivDownAutoHandle);
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <Driver_Down_Auto+0x2c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <Driver_Down_Auto+0x30>)
 800095a:	4a07      	ldr	r2, [pc, #28]	; (8000978 <Driver_Down_Auto+0x34>)
 800095c:	4907      	ldr	r1, [pc, #28]	; (800097c <Driver_Down_Auto+0x38>)
 800095e:	4808      	ldr	r0, [pc, #32]	; (8000980 <Driver_Down_Auto+0x3c>)
 8000960:	f000 f8bc 	bl	8000adc <Handle_Window_Movement>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200002d2 	.word	0x200002d2
 8000970:	200002dc 	.word	0x200002dc
 8000974:	200002c8 	.word	0x200002c8
 8000978:	200002d0 	.word	0x200002d0
 800097c:	200002d1 	.word	0x200002d1
 8000980:	08000d41 	.word	0x08000d41

08000984 <Driver_Down_Manual>:

void Driver_Down_Manual(void *pvParameters) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af02      	add	r7, sp, #8
 800098a:	6078      	str	r0, [r7, #4]
	isPassenger = false;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <Driver_Down_Manual+0x30>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
    Handle_Manual_Movement(GPIOA, Driver_Down_Button_Pin, Motor_Move_Backward, &lowerLimitReached, &jamDetected, xdrivDownManuHandle);
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <Driver_Down_Manual+0x34>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <Driver_Down_Manual+0x38>)
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <Driver_Down_Manual+0x3c>)
 800099e:	4a09      	ldr	r2, [pc, #36]	; (80009c4 <Driver_Down_Manual+0x40>)
 80009a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a4:	4808      	ldr	r0, [pc, #32]	; (80009c8 <Driver_Down_Manual+0x44>)
 80009a6:	f000 f8fb 	bl	8000ba0 <Handle_Manual_Movement>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200002d2 	.word	0x200002d2
 80009b8:	200002e0 	.word	0x200002e0
 80009bc:	200002c8 	.word	0x200002c8
 80009c0:	200002d1 	.word	0x200002d1
 80009c4:	08000d41 	.word	0x08000d41
 80009c8:	40020000 	.word	0x40020000

080009cc <Passenger_Up_Auto>:

/* PASSENGER TASKS */
void Passenger_Up_Auto(void *pvParameters) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af02      	add	r7, sp, #8
 80009d2:	6078      	str	r0, [r7, #4]
	isPassenger = true;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <Passenger_Up_Auto+0x28>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
    Handle_Window_Movement(Motor_Move_Forward, &upperLimitReached, &lowerLimitReached, &jamDetected, xpassUpAutoHandle);
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <Passenger_Up_Auto+0x2c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <Passenger_Up_Auto+0x30>)
 80009e2:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <Passenger_Up_Auto+0x34>)
 80009e4:	4907      	ldr	r1, [pc, #28]	; (8000a04 <Passenger_Up_Auto+0x38>)
 80009e6:	4808      	ldr	r0, [pc, #32]	; (8000a08 <Passenger_Up_Auto+0x3c>)
 80009e8:	f000 f878 	bl	8000adc <Handle_Window_Movement>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200002d2 	.word	0x200002d2
 80009f8:	200002e4 	.word	0x200002e4
 80009fc:	200002c8 	.word	0x200002c8
 8000a00:	200002d1 	.word	0x200002d1
 8000a04:	200002d0 	.word	0x200002d0
 8000a08:	08000d1d 	.word	0x08000d1d

08000a0c <Passenger_Up_Manual>:

void Passenger_Up_Manual(void *pvParameters) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af02      	add	r7, sp, #8
 8000a12:	6078      	str	r0, [r7, #4]
	isPassenger = true;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <Passenger_Up_Manual+0x30>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
    Handle_Manual_Movement(GPIOB, Passenger_Up_Button_Pin, Motor_Move_Forward, &upperLimitReached, &jamDetected, xpassUpManuHandle);
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <Passenger_Up_Manual+0x34>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <Passenger_Up_Manual+0x38>)
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <Passenger_Up_Manual+0x3c>)
 8000a26:	4a09      	ldr	r2, [pc, #36]	; (8000a4c <Passenger_Up_Manual+0x40>)
 8000a28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <Passenger_Up_Manual+0x44>)
 8000a2e:	f000 f8b7 	bl	8000ba0 <Handle_Manual_Movement>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200002d2 	.word	0x200002d2
 8000a40:	200002e8 	.word	0x200002e8
 8000a44:	200002c8 	.word	0x200002c8
 8000a48:	200002d0 	.word	0x200002d0
 8000a4c:	08000d1d 	.word	0x08000d1d
 8000a50:	40020400 	.word	0x40020400

08000a54 <Passenger_Down_Auto>:

void Passenger_Down_Auto(void *pvParameters) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	6078      	str	r0, [r7, #4]
	isPassenger = true;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <Passenger_Down_Auto+0x28>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
    Handle_Window_Movement(Motor_Move_Backward, &lowerLimitReached, &upperLimitReached, &jamDetected, xpassUpAutoHandle);
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <Passenger_Down_Auto+0x2c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <Passenger_Down_Auto+0x30>)
 8000a6a:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <Passenger_Down_Auto+0x34>)
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <Passenger_Down_Auto+0x38>)
 8000a6e:	4808      	ldr	r0, [pc, #32]	; (8000a90 <Passenger_Down_Auto+0x3c>)
 8000a70:	f000 f834 	bl	8000adc <Handle_Window_Movement>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200002d2 	.word	0x200002d2
 8000a80:	200002e4 	.word	0x200002e4
 8000a84:	200002c8 	.word	0x200002c8
 8000a88:	200002d0 	.word	0x200002d0
 8000a8c:	200002d1 	.word	0x200002d1
 8000a90:	08000d41 	.word	0x08000d41

08000a94 <Passenger_Down_Manual>:

void Passenger_Down_Manual(void *pvParameters) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af02      	add	r7, sp, #8
 8000a9a:	6078      	str	r0, [r7, #4]
	isPassenger = true;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <Passenger_Down_Manual+0x30>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
    Handle_Manual_Movement(GPIOB, Passenger_Down_Button_Pin, Motor_Move_Backward, &lowerLimitReached, &jamDetected, xpassDownManuHandle);
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <Passenger_Down_Manual+0x34>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <Passenger_Down_Manual+0x38>)
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <Passenger_Down_Manual+0x3c>)
 8000aae:	4a09      	ldr	r2, [pc, #36]	; (8000ad4 <Passenger_Down_Manual+0x40>)
 8000ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <Passenger_Down_Manual+0x44>)
 8000ab6:	f000 f873 	bl	8000ba0 <Handle_Manual_Movement>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200002d2 	.word	0x200002d2
 8000ac8:	200002f0 	.word	0x200002f0
 8000acc:	200002c8 	.word	0x200002c8
 8000ad0:	200002d1 	.word	0x200002d1
 8000ad4:	08000d41 	.word	0x08000d41
 8000ad8:	40020400 	.word	0x40020400

08000adc <Handle_Window_Movement>:

/* UTILITY FUNCTIONS */
void Handle_Window_Movement(void (*Motor_Move)(void), volatile bool *limitReached, volatile bool *oppositeLimitReached, volatile int *jamDetected, TaskHandle_t handle) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	603b      	str	r3, [r7, #0]
    TaskHandle_t xReceivedHandle;
    TickType_t xLastWakeTime;

    if (xQueueReceive(xQueue, &xReceivedHandle, 0) == pdTRUE) {
 8000aea:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <Handle_Window_Movement+0xb8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f107 0110 	add.w	r1, r7, #16
 8000af2:	2200      	movs	r2, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 fb81 	bl	80031fc <xQueueReceive>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d103      	bne.n	8000b08 <Handle_Window_Movement+0x2c>
        vTaskDelete(xReceivedHandle);
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 f822 	bl	8003b4c <vTaskDelete>
    }

    // Check if window lock is activated
    if (windowLock == 1 && isPassenger) {
 8000b08:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <Handle_Window_Movement+0xbc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d10f      	bne.n	8000b30 <Handle_Window_Movement+0x54>
 8000b10:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <Handle_Window_Movement+0xc0>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d00a      	beq.n	8000b30 <Handle_Window_Movement+0x54>
        // Window lock is activated, stop movement
        Motor_Stop();
 8000b1a:	f000 f923 	bl	8000d64 <Motor_Stop>
        vTaskDelete(handle);
 8000b1e:	6a38      	ldr	r0, [r7, #32]
 8000b20:	f003 f814 	bl	8003b4c <vTaskDelete>
        return;
 8000b24:	e032      	b.n	8000b8c <Handle_Window_Movement+0xb0>
    }

    while (!(*limitReached) && (*jamDetected == 0)) {
        Motor_Move();
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4798      	blx	r3
        *oppositeLimitReached = false;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
    while (!(*limitReached) && (*jamDetected == 0)) {
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f083 0301 	eor.w	r3, r3, #1
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d003      	beq.n	8000b48 <Handle_Window_Movement+0x6c>
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d0ee      	beq.n	8000b26 <Handle_Window_Movement+0x4a>
    }

    if(*jamDetected == 1){
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d118      	bne.n	8000b82 <Handle_Window_Movement+0xa6>
		Motor_Stop();
 8000b50:	f000 f908 	bl	8000d64 <Motor_Stop>
		xLastWakeTime =  xTaskGetTickCount();
 8000b54:	f003 f9c8 	bl	8003ee8 <xTaskGetTickCount>
 8000b58:	6178      	str	r0, [r7, #20]
		while((xTaskGetTickCount() - xLastWakeTime) < pdMS_TO_TICKS(1000)){
 8000b5a:	e001      	b.n	8000b60 <Handle_Window_Movement+0x84>
			Motor_Move_Backward();
 8000b5c:	f000 f8f0 	bl	8000d40 <Motor_Move_Backward>
		while((xTaskGetTickCount() - xLastWakeTime) < pdMS_TO_TICKS(1000)){
 8000b60:	f003 f9c2 	bl	8003ee8 <xTaskGetTickCount>
 8000b64:	4602      	mov	r2, r0
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b6e:	d3f5      	bcc.n	8000b5c <Handle_Window_Movement+0x80>
		}
		*jamDetected = 0;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
		Motor_Stop();
 8000b76:	f000 f8f5 	bl	8000d64 <Motor_Stop>
		vTaskDelete(handle);
 8000b7a:	6a38      	ldr	r0, [r7, #32]
 8000b7c:	f002 ffe6 	bl	8003b4c <vTaskDelete>
		return;
 8000b80:	e004      	b.n	8000b8c <Handle_Window_Movement+0xb0>
	}

    Motor_Stop();
 8000b82:	f000 f8ef 	bl	8000d64 <Motor_Stop>
    vTaskDelete(handle);
 8000b86:	6a38      	ldr	r0, [r7, #32]
 8000b88:	f002 ffe0 	bl	8003b4c <vTaskDelete>
}
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000030c 	.word	0x2000030c
 8000b98:	200002cc 	.word	0x200002cc
 8000b9c:	200002d2 	.word	0x200002d2

08000ba0 <Handle_Manual_Movement>:

void Handle_Manual_Movement(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, void (*Motor_Move)(void), volatile bool *limitReached, volatile int *jamDetected, TaskHandle_t handle) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	460b      	mov	r3, r1
 8000bae:	817b      	strh	r3, [r7, #10]
    TaskHandle_t xReceivedHandle;
    TickType_t xLastWakeTime;

    if (xQueueReceive(xQueue, &xReceivedHandle, 0) == pdTRUE) {
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <Handle_Manual_Movement+0xc4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f107 0110 	add.w	r1, r7, #16
 8000bb8:	2200      	movs	r2, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fb1e 	bl	80031fc <xQueueReceive>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d103      	bne.n	8000bce <Handle_Manual_Movement+0x2e>
        vTaskDelete(xReceivedHandle);
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 ffbf 	bl	8003b4c <vTaskDelete>
    }

    // Check if window lock is activated
    if (windowLock == 1 && isPassenger) {
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <Handle_Manual_Movement+0xc8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d10c      	bne.n	8000bf0 <Handle_Manual_Movement+0x50>
 8000bd6:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <Handle_Manual_Movement+0xcc>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d007      	beq.n	8000bf0 <Handle_Manual_Movement+0x50>
        // Window lock is activated, stop movement
        Motor_Stop();
 8000be0:	f000 f8c0 	bl	8000d64 <Motor_Stop>
        vTaskDelete(handle);
 8000be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000be6:	f002 ffb1 	bl	8003b4c <vTaskDelete>
        return;
 8000bea:	e037      	b.n	8000c5c <Handle_Manual_Movement+0xbc>
    }

    while (!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) && !(*limitReached) && (*jamDetected == 0)) {
        Motor_Move();
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4798      	blx	r3
    while (!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) && !(*limitReached) && (*jamDetected == 0)) {
 8000bf0:	897b      	ldrh	r3, [r7, #10]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f000 fecb 	bl	8001990 <HAL_GPIO_ReadPin>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d10b      	bne.n	8000c18 <Handle_Manual_Movement+0x78>
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f083 0301 	eor.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <Handle_Manual_Movement+0x78>
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0e9      	beq.n	8000bec <Handle_Manual_Movement+0x4c>
    }

	if(*jamDetected == 1){
 8000c18:	6a3b      	ldr	r3, [r7, #32]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d118      	bne.n	8000c52 <Handle_Manual_Movement+0xb2>
		Motor_Stop();
 8000c20:	f000 f8a0 	bl	8000d64 <Motor_Stop>
		xLastWakeTime =  xTaskGetTickCount();
 8000c24:	f003 f960 	bl	8003ee8 <xTaskGetTickCount>
 8000c28:	6178      	str	r0, [r7, #20]
		while((xTaskGetTickCount() - xLastWakeTime) < pdMS_TO_TICKS(1000)){
 8000c2a:	e001      	b.n	8000c30 <Handle_Manual_Movement+0x90>
			Motor_Move_Backward();
 8000c2c:	f000 f888 	bl	8000d40 <Motor_Move_Backward>
		while((xTaskGetTickCount() - xLastWakeTime) < pdMS_TO_TICKS(1000)){
 8000c30:	f003 f95a 	bl	8003ee8 <xTaskGetTickCount>
 8000c34:	4602      	mov	r2, r0
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c3e:	d3f5      	bcc.n	8000c2c <Handle_Manual_Movement+0x8c>
		}
		*jamDetected = 0;
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
		Motor_Stop();
 8000c46:	f000 f88d 	bl	8000d64 <Motor_Stop>
		vTaskDelete(handle);
 8000c4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c4c:	f002 ff7e 	bl	8003b4c <vTaskDelete>
		return;
 8000c50:	e004      	b.n	8000c5c <Handle_Manual_Movement+0xbc>
	}

    Motor_Stop();
 8000c52:	f000 f887 	bl	8000d64 <Motor_Stop>
    vTaskDelete(handle);
 8000c56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c58:	f002 ff78 	bl	8003b4c <vTaskDelete>
}
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000030c 	.word	0x2000030c
 8000c68:	200002cc 	.word	0x200002cc
 8000c6c:	200002d2 	.word	0x200002d2

08000c70 <Set_Upper_Limit>:


void Set_Upper_Limit(void *pvParameters)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	// Wait for the semaphore
	while(1){
		xSemaphoreTake(xupperLimitReachedSemaphore, portMAX_DELAY);//semaphore is given in ISR
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <Set_Upper_Limit+0x20>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 fb9b 	bl	80033bc <xQueueSemaphoreTake>
		//change upper limit flag to true to indicate upper limit reached
		upperLimitReached = true;
 8000c86:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <Set_Upper_Limit+0x24>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
		xSemaphoreTake(xupperLimitReachedSemaphore, portMAX_DELAY);//semaphore is given in ISR
 8000c8c:	e7f4      	b.n	8000c78 <Set_Upper_Limit+0x8>
 8000c8e:	bf00      	nop
 8000c90:	200002f4 	.word	0x200002f4
 8000c94:	200002d0 	.word	0x200002d0

08000c98 <Set_Lower_Limit>:
	}
}


void Set_Lower_Limit(void *pvParameters)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	// Wait for the semaphore
	while(1){
		xSemaphoreTake(xlowerLimitReachedSemaphore, portMAX_DELAY);//semaphore is given in ISR
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <Set_Lower_Limit+0x20>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 fb87 	bl	80033bc <xQueueSemaphoreTake>
		//change lower limit flag to true to indicate lower limit reached
		lowerLimitReached = true;
 8000cae:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <Set_Lower_Limit+0x24>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
		xSemaphoreTake(xlowerLimitReachedSemaphore, portMAX_DELAY);//semaphore is given in ISR
 8000cb4:	e7f4      	b.n	8000ca0 <Set_Lower_Limit+0x8>
 8000cb6:	bf00      	nop
 8000cb8:	200002f8 	.word	0x200002f8
 8000cbc:	200002d1 	.word	0x200002d1

08000cc0 <Set_Window_Lock>:
	}
}

void Set_Window_Lock(void *pvParameters)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	// Wait for the semaphore
	while(1){
		xSemaphoreTake(xwindowLockSemaphore, portMAX_DELAY);//semaphore is given in ISR
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <Set_Window_Lock+0x2c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f002 fb73 	bl	80033bc <xQueueSemaphoreTake>
		//toggle window lock accordingly
		windowLock = !windowLock;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <Set_Window_Lock+0x30>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <Set_Window_Lock+0x30>)
 8000ce8:	601a      	str	r2, [r3, #0]
		xSemaphoreTake(xwindowLockSemaphore, portMAX_DELAY);//semaphore is given in ISR
 8000cea:	e7ed      	b.n	8000cc8 <Set_Window_Lock+0x8>
 8000cec:	200002fc 	.word	0x200002fc
 8000cf0:	200002cc 	.word	0x200002cc

08000cf4 <Set_Jam_Detected>:
	}
}


void Set_Jam_Detected(void *pvParameters)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(xjamDetectedSemaphore, portMAX_DELAY);//semaphore is given in ISR
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <Set_Jam_Detected+0x20>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fb59 	bl	80033bc <xQueueSemaphoreTake>
		//change jam detected flag to 1 to indicate jam was detected and initiate jamming protocol
		jamDetected = 1;
 8000d0a:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <Set_Jam_Detected+0x24>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
		xSemaphoreTake(xjamDetectedSemaphore, portMAX_DELAY);//semaphore is given in ISR
 8000d10:	e7f4      	b.n	8000cfc <Set_Jam_Detected+0x8>
 8000d12:	bf00      	nop
 8000d14:	20000300 	.word	0x20000300
 8000d18:	200002c8 	.word	0x200002c8

08000d1c <Motor_Move_Forward>:
	}

}

void Motor_Move_Forward(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, Motor_Pin_1, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <Motor_Move_Forward+0x20>)
 8000d28:	f000 fe4a 	bl	80019c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Motor_Pin_2, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2120      	movs	r1, #32
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <Motor_Move_Forward+0x20>)
 8000d32:	f000 fe45 	bl	80019c0 <HAL_GPIO_WritePin>
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40020400 	.word	0x40020400

08000d40 <Motor_Move_Backward>:

void Motor_Move_Backward(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, Motor_Pin_1, GPIO_PIN_RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <Motor_Move_Backward+0x20>)
 8000d4c:	f000 fe38 	bl	80019c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Motor_Pin_2, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2120      	movs	r1, #32
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <Motor_Move_Backward+0x20>)
 8000d56:	f000 fe33 	bl	80019c0 <HAL_GPIO_WritePin>
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40020400 	.word	0x40020400

08000d64 <Motor_Stop>:

void Motor_Stop(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, Motor_Pin_1, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <Motor_Stop+0x20>)
 8000d70:	f000 fe26 	bl	80019c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Motor_Pin_2, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2120      	movs	r1, #32
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <Motor_Stop+0x20>)
 8000d7a:	f000 fe21 	bl	80019c0 <HAL_GPIO_WritePin>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40020400 	.word	0x40020400

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b094      	sub	sp, #80	; 0x50
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2234      	movs	r2, #52	; 0x34
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f004 fa08 	bl	80051ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <SystemClock_Config+0xd4>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a29      	ldr	r2, [pc, #164]	; (8000e5c <SystemClock_Config+0xd4>)
 8000db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <SystemClock_Config+0xd4>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <SystemClock_Config+0xd8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <SystemClock_Config+0xd8>)
 8000dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <SystemClock_Config+0xd8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df0:	2310      	movs	r3, #16
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df4:	2302      	movs	r3, #2
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e06:	2304      	movs	r3, #4
 8000e08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 f95a 	bl	80020d0 <HAL_RCC_OscConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e22:	f000 f90f 	bl	8001044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e26:	230f      	movs	r3, #15
 8000e28:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	2102      	movs	r1, #2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fdfa 	bl	8001a3c <HAL_RCC_ClockConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e4e:	f000 f8f9 	bl	8001044 <Error_Handler>
  }
}
 8000e52:	bf00      	nop
 8000e54:	3750      	adds	r7, #80	; 0x50
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40007000 	.word	0x40007000

08000e64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <MX_USART2_UART_Init+0x50>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	f001 fbb6 	bl	800260c <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ea6:	f000 f8cd 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000280 	.word	0x20000280
 8000eb4:	40004400 	.word	0x40004400

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b58      	ldr	r3, [pc, #352]	; (8001034 <MX_GPIO_Init+0x17c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a57      	ldr	r2, [pc, #348]	; (8001034 <MX_GPIO_Init+0x17c>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b55      	ldr	r3, [pc, #340]	; (8001034 <MX_GPIO_Init+0x17c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b51      	ldr	r3, [pc, #324]	; (8001034 <MX_GPIO_Init+0x17c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a50      	ldr	r2, [pc, #320]	; (8001034 <MX_GPIO_Init+0x17c>)
 8000ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b4e      	ldr	r3, [pc, #312]	; (8001034 <MX_GPIO_Init+0x17c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b4a      	ldr	r3, [pc, #296]	; (8001034 <MX_GPIO_Init+0x17c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a49      	ldr	r2, [pc, #292]	; (8001034 <MX_GPIO_Init+0x17c>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b47      	ldr	r3, [pc, #284]	; (8001034 <MX_GPIO_Init+0x17c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b43      	ldr	r3, [pc, #268]	; (8001034 <MX_GPIO_Init+0x17c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a42      	ldr	r2, [pc, #264]	; (8001034 <MX_GPIO_Init+0x17c>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b40      	ldr	r3, [pc, #256]	; (8001034 <MX_GPIO_Init+0x17c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2120      	movs	r1, #32
 8000f42:	483d      	ldr	r0, [pc, #244]	; (8001038 <MX_GPIO_Init+0x180>)
 8000f44:	f000 fd3c 	bl	80019c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4e:	483b      	ldr	r0, [pc, #236]	; (800103c <MX_GPIO_Init+0x184>)
 8000f50:	f000 fd36 	bl	80019c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4835      	ldr	r0, [pc, #212]	; (8001040 <MX_GPIO_Init+0x188>)
 8000f6c:	f000 fb7c 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f70:	2320      	movs	r3, #32
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	482c      	ldr	r0, [pc, #176]	; (8001038 <MX_GPIO_Init+0x180>)
 8000f88:	f000 fb6e 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15;
 8000f8c:	f24c 0306 	movw	r3, #49158	; 0xc006
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f92:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4826      	ldr	r0, [pc, #152]	; (800103c <MX_GPIO_Init+0x184>)
 8000fa4:	f000 fb60 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000fa8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	481f      	ldr	r0, [pc, #124]	; (800103c <MX_GPIO_Init+0x184>)
 8000fbe:	f000 fb53 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000fc2:	f242 0320 	movw	r3, #8224	; 0x2020
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4818      	ldr	r0, [pc, #96]	; (800103c <MX_GPIO_Init+0x184>)
 8000fdc:	f000 fb44 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fe0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4810      	ldr	r0, [pc, #64]	; (8001038 <MX_GPIO_Init+0x180>)
 8000ff6:	f000 fb37 	bl	8001668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2105      	movs	r1, #5
 8000ffe:	2007      	movs	r0, #7
 8001000:	f000 fafb 	bl	80015fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001004:	2007      	movs	r0, #7
 8001006:	f000 fb14 	bl	8001632 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2105      	movs	r1, #5
 800100e:	2008      	movs	r0, #8
 8001010:	f000 faf3 	bl	80015fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001014:	2008      	movs	r0, #8
 8001016:	f000 fb0c 	bl	8001632 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2105      	movs	r1, #5
 800101e:	2028      	movs	r0, #40	; 0x28
 8001020:	f000 faeb 	bl	80015fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001024:	2028      	movs	r0, #40	; 0x28
 8001026:	f000 fb04 	bl	8001632 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000
 800103c:	40020400 	.word	0x40020400
 8001040:	40020800 	.word	0x40020800

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104c:	e7fe      	b.n	800104c <Error_Handler+0x8>
	...

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_MspInit+0x54>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a11      	ldr	r2, [pc, #68]	; (80010a4 <HAL_MspInit+0x54>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HAL_MspInit+0x54>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_MspInit+0x54>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <HAL_MspInit+0x54>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_MspInit+0x54>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	210f      	movs	r1, #15
 8001092:	f06f 0001 	mvn.w	r0, #1
 8001096:	f000 fab0 	bl	80015fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <HAL_UART_MspInit+0x84>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d12b      	bne.n	8001122 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_UART_MspInit+0x88>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_UART_MspInit+0x88>)
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_UART_MspInit+0x88>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_UART_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_UART_MspInit+0x88>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_UART_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001102:	230c      	movs	r3, #12
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001112:	2307      	movs	r3, #7
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_UART_MspInit+0x8c>)
 800111e:	f000 faa3 	bl	8001668 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40004400 	.word	0x40004400
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800113c:	e7fe      	b.n	800113c <NMI_Handler+0x4>

0800113e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler+0x4>

0800114a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <UsageFault_Handler+0x4>

08001156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001168:	f000 f94c 	bl	8001404 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800116c:	f003 f9c0 	bl	80044f0 <xTaskGetSchedulerState>
 8001170:	4603      	mov	r3, r0
 8001172:	2b01      	cmp	r3, #1
 8001174:	d001      	beq.n	800117a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001176:	f003 fd9f 	bl	8004cb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
    if (__HAL_GPIO_EXTI_GET_IT(Jam_Detected_Pin) != RESET) {
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <EXTI1_IRQHandler+0x50>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d016      	beq.n	80011c0 <EXTI1_IRQHandler+0x40>
        __HAL_GPIO_EXTI_CLEAR_IT(Jam_Detected_Pin);
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <EXTI1_IRQHandler+0x50>)
 8001194:	2202      	movs	r2, #2
 8001196:	615a      	str	r2, [r3, #20]
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
        xSemaphoreGiveFromISR(xjamDetectedSemaphore, &xHigherPriorityTaskWoken);
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <EXTI1_IRQHandler+0x54>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	1d3a      	adds	r2, r7, #4
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 ff9b 	bl	80030e0 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d007      	beq.n	80011c0 <EXTI1_IRQHandler+0x40>
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <EXTI1_IRQHandler+0x58>)
 80011b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	f3bf 8f4f 	dsb	sy
 80011bc:	f3bf 8f6f 	isb	sy
    }
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80011c0:	2002      	movs	r0, #2
 80011c2:	f000 fc17 	bl	80019f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40013c00 	.word	0x40013c00
 80011d4:	20000300 	.word	0x20000300
 80011d8:	e000ed04 	.word	0xe000ed04

080011dc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
    if (__HAL_GPIO_EXTI_GET_IT(Window_Lock_Pin) != RESET) {
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <EXTI2_IRQHandler+0x50>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d016      	beq.n	800121c <EXTI2_IRQHandler+0x40>
        __HAL_GPIO_EXTI_CLEAR_IT(Window_Lock_Pin);
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <EXTI2_IRQHandler+0x50>)
 80011f0:	2204      	movs	r2, #4
 80011f2:	615a      	str	r2, [r3, #20]
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
        xSemaphoreGiveFromISR(xwindowLockSemaphore, &xHigherPriorityTaskWoken);
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <EXTI2_IRQHandler+0x54>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1d3a      	adds	r2, r7, #4
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f001 ff6d 	bl	80030e0 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <EXTI2_IRQHandler+0x40>
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <EXTI2_IRQHandler+0x58>)
 800120e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	f3bf 8f4f 	dsb	sy
 8001218:	f3bf 8f6f 	isb	sy
    }
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800121c:	2004      	movs	r0, #4
 800121e:	f000 fbe9 	bl	80019f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40013c00 	.word	0x40013c00
 8001230:	200002fc 	.word	0x200002fc
 8001234:	e000ed04 	.word	0xe000ed04

08001238 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


    if (__HAL_GPIO_EXTI_GET_IT(Upper_Limit_Pin) != RESET) {
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <EXTI15_10_IRQHandler+0xa0>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d017      	beq.n	800127a <EXTI15_10_IRQHandler+0x42>
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
        __HAL_GPIO_EXTI_CLEAR_IT(Upper_Limit_Pin);
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <EXTI15_10_IRQHandler+0xa0>)
 8001250:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001254:	615a      	str	r2, [r3, #20]
        xSemaphoreGiveFromISR(xupperLimitReachedSemaphore, &xHigherPriorityTaskWoken);
 8001256:	4b21      	ldr	r3, [pc, #132]	; (80012dc <EXTI15_10_IRQHandler+0xa4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	1d3a      	adds	r2, r7, #4
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f001 ff3e 	bl	80030e0 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <EXTI15_10_IRQHandler+0x42>
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <EXTI15_10_IRQHandler+0xa8>)
 800126c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	f3bf 8f4f 	dsb	sy
 8001276:	f3bf 8f6f 	isb	sy
    }
    if (__HAL_GPIO_EXTI_GET_IT(Lower_Limit_Pin) != RESET) {
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <EXTI15_10_IRQHandler+0xa0>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d017      	beq.n	80012b6 <EXTI15_10_IRQHandler+0x7e>
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
        __HAL_GPIO_EXTI_CLEAR_IT(Lower_Limit_Pin);
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <EXTI15_10_IRQHandler+0xa0>)
 800128c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001290:	615a      	str	r2, [r3, #20]
        xSemaphoreGiveFromISR(xlowerLimitReachedSemaphore, &xHigherPriorityTaskWoken);
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <EXTI15_10_IRQHandler+0xac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	463a      	mov	r2, r7
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f001 ff20 	bl	80030e0 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <EXTI15_10_IRQHandler+0x7e>
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <EXTI15_10_IRQHandler+0xa8>)
 80012a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	f3bf 8f4f 	dsb	sy
 80012b2:	f3bf 8f6f 	isb	sy
    }


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012ba:	f000 fb9b 	bl	80019f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80012be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012c2:	f000 fb97 	bl	80019f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80012c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012ca:	f000 fb93 	bl	80019f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40013c00 	.word	0x40013c00
 80012dc:	200002f4 	.word	0x200002f4
 80012e0:	e000ed04 	.word	0xe000ed04
 80012e4:	200002f8 	.word	0x200002f8

080012e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <SystemInit+0x20>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <SystemInit+0x20>)
 80012f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001310:	f7ff ffea 	bl	80012e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001316:	490d      	ldr	r1, [pc, #52]	; (800134c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800131c:	e002      	b.n	8001324 <LoopCopyDataInit>

0800131e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001322:	3304      	adds	r3, #4

08001324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001328:	d3f9      	bcc.n	800131e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800132c:	4c0a      	ldr	r4, [pc, #40]	; (8001358 <LoopFillZerobss+0x22>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001330:	e001      	b.n	8001336 <LoopFillZerobss>

08001332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001334:	3204      	adds	r2, #4

08001336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001338:	d3fb      	bcc.n	8001332 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800133a:	f003 ff3f 	bl	80051bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133e:	f7ff f8ff 	bl	8000540 <main>
  bx  lr    
 8001342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001350:	080052c4 	.word	0x080052c4
  ldr r2, =_sbss
 8001354:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001358:	20004068 	.word	0x20004068

0800135c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC_IRQHandler>
	...

08001360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_Init+0x40>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <HAL_Init+0x40>)
 800136a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <HAL_Init+0x40>)
 8001376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_Init+0x40>)
 8001382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001388:	2003      	movs	r0, #3
 800138a:	f000 f92b 	bl	80015e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800138e:	200f      	movs	r0, #15
 8001390:	f000 f808 	bl	80013a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001394:	f7ff fe5c 	bl	8001050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023c00 	.word	0x40023c00

080013a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_InitTick+0x54>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x58>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80013be:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f943 	bl	800164e <HAL_SYSTICK_Config>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00e      	b.n	80013f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b0f      	cmp	r3, #15
 80013d6:	d80a      	bhi.n	80013ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d8:	2200      	movs	r2, #0
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f000 f90b 	bl	80015fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <HAL_InitTick+0x5c>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e000      	b.n	80013f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000008 	.word	0x20000008
 8001400:	20000004 	.word	0x20000004

08001404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x20>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x24>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_IncTick+0x24>)
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008
 8001428:	20000310 	.word	0x20000310

0800142c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_GetTick+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000310 	.word	0x20000310

08001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800146c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	; (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	; (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
         );
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b0:	d301      	bcc.n	80015b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00f      	b.n	80015d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <SysTick_Config+0x40>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015be:	210f      	movs	r1, #15
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f7ff ff8e 	bl	80014e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SysTick_Config+0x40>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <SysTick_Config+0x40>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff29 	bl	8001444 <__NVIC_SetPriorityGrouping>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800160c:	f7ff ff3e 	bl	800148c <__NVIC_GetPriorityGrouping>
 8001610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f7ff ff8e 	bl	8001538 <NVIC_EncodePriority>
 800161c:	4602      	mov	r2, r0
 800161e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff5d 	bl	80014e4 <__NVIC_SetPriority>
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff31 	bl	80014a8 <__NVIC_EnableIRQ>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ffa2 	bl	80015a0 <SysTick_Config>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	e165      	b.n	8001950 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001684:	2201      	movs	r2, #1
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	429a      	cmp	r2, r3
 800169e:	f040 8154 	bne.w	800194a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d005      	beq.n	80016ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d130      	bne.n	800171c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	2203      	movs	r2, #3
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f0:	2201      	movs	r2, #1
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 0201 	and.w	r2, r3, #1
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b03      	cmp	r3, #3
 8001726:	d017      	beq.n	8001758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d123      	bne.n	80017ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	08da      	lsrs	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3208      	adds	r2, #8
 800176c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	08da      	lsrs	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3208      	adds	r2, #8
 80017a6:	69b9      	ldr	r1, [r7, #24]
 80017a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0203 	and.w	r2, r3, #3
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80ae 	beq.w	800194a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <HAL_GPIO_Init+0x300>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a5c      	ldr	r2, [pc, #368]	; (8001968 <HAL_GPIO_Init+0x300>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b5a      	ldr	r3, [pc, #360]	; (8001968 <HAL_GPIO_Init+0x300>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800180a:	4a58      	ldr	r2, [pc, #352]	; (800196c <HAL_GPIO_Init+0x304>)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4f      	ldr	r2, [pc, #316]	; (8001970 <HAL_GPIO_Init+0x308>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d025      	beq.n	8001882 <HAL_GPIO_Init+0x21a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4e      	ldr	r2, [pc, #312]	; (8001974 <HAL_GPIO_Init+0x30c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d01f      	beq.n	800187e <HAL_GPIO_Init+0x216>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4d      	ldr	r2, [pc, #308]	; (8001978 <HAL_GPIO_Init+0x310>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d019      	beq.n	800187a <HAL_GPIO_Init+0x212>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4c      	ldr	r2, [pc, #304]	; (800197c <HAL_GPIO_Init+0x314>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <HAL_GPIO_Init+0x20e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4b      	ldr	r2, [pc, #300]	; (8001980 <HAL_GPIO_Init+0x318>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00d      	beq.n	8001872 <HAL_GPIO_Init+0x20a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4a      	ldr	r2, [pc, #296]	; (8001984 <HAL_GPIO_Init+0x31c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d007      	beq.n	800186e <HAL_GPIO_Init+0x206>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_GPIO_Init+0x320>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d101      	bne.n	800186a <HAL_GPIO_Init+0x202>
 8001866:	2306      	movs	r3, #6
 8001868:	e00c      	b.n	8001884 <HAL_GPIO_Init+0x21c>
 800186a:	2307      	movs	r3, #7
 800186c:	e00a      	b.n	8001884 <HAL_GPIO_Init+0x21c>
 800186e:	2305      	movs	r3, #5
 8001870:	e008      	b.n	8001884 <HAL_GPIO_Init+0x21c>
 8001872:	2304      	movs	r3, #4
 8001874:	e006      	b.n	8001884 <HAL_GPIO_Init+0x21c>
 8001876:	2303      	movs	r3, #3
 8001878:	e004      	b.n	8001884 <HAL_GPIO_Init+0x21c>
 800187a:	2302      	movs	r3, #2
 800187c:	e002      	b.n	8001884 <HAL_GPIO_Init+0x21c>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <HAL_GPIO_Init+0x21c>
 8001882:	2300      	movs	r3, #0
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	f002 0203 	and.w	r2, r2, #3
 800188a:	0092      	lsls	r2, r2, #2
 800188c:	4093      	lsls	r3, r2
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001894:	4935      	ldr	r1, [pc, #212]	; (800196c <HAL_GPIO_Init+0x304>)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3302      	adds	r3, #2
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a2:	4b3a      	ldr	r3, [pc, #232]	; (800198c <HAL_GPIO_Init+0x324>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018c6:	4a31      	ldr	r2, [pc, #196]	; (800198c <HAL_GPIO_Init+0x324>)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018cc:	4b2f      	ldr	r3, [pc, #188]	; (800198c <HAL_GPIO_Init+0x324>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018f0:	4a26      	ldr	r2, [pc, #152]	; (800198c <HAL_GPIO_Init+0x324>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018f6:	4b25      	ldr	r3, [pc, #148]	; (800198c <HAL_GPIO_Init+0x324>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800191a:	4a1c      	ldr	r2, [pc, #112]	; (800198c <HAL_GPIO_Init+0x324>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_GPIO_Init+0x324>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001944:	4a11      	ldr	r2, [pc, #68]	; (800198c <HAL_GPIO_Init+0x324>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3301      	adds	r3, #1
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	2b0f      	cmp	r3, #15
 8001954:	f67f ae96 	bls.w	8001684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	40013800 	.word	0x40013800
 8001970:	40020000 	.word	0x40020000
 8001974:	40020400 	.word	0x40020400
 8001978:	40020800 	.word	0x40020800
 800197c:	40020c00 	.word	0x40020c00
 8001980:	40021000 	.word	0x40021000
 8001984:	40021400 	.word	0x40021400
 8001988:	40021800 	.word	0x40021800
 800198c:	40013c00 	.word	0x40013c00

08001990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	e001      	b.n	80019b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
 80019cc:	4613      	mov	r3, r2
 80019ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d0:	787b      	ldrb	r3, [r7, #1]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019dc:	e003      	b.n	80019e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019de:	887b      	ldrh	r3, [r7, #2]
 80019e0:	041a      	lsls	r2, r3, #16
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	619a      	str	r2, [r3, #24]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d006      	beq.n	8001a18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 f806 	bl	8001a24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40013c00 	.word	0x40013c00

08001a24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0cc      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d90c      	bls.n	8001a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b65      	ldr	r3, [pc, #404]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0b8      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d020      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a90:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	494d      	ldr	r1, [pc, #308]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d044      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d119      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e07f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e06f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e067      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f023 0203 	bic.w	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4934      	ldr	r1, [pc, #208]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b2c:	f7ff fc7e 	bl	800142c <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b34:	f7ff fc7a 	bl	800142c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e04f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 020c 	and.w	r2, r3, #12
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1eb      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d20c      	bcs.n	8001b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e032      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4916      	ldr	r1, [pc, #88]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc2:	f000 f855 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	490a      	ldr	r1, [pc, #40]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	5ccb      	ldrb	r3, [r1, r3]
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fbde 	bl	80013a4 <HAL_InitTick>

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023c00 	.word	0x40023c00
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	0800529c 	.word	0x0800529c
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000000 	.word	0x20000000

08001c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c24:	f7ff fff0 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0a9b      	lsrs	r3, r3, #10
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4903      	ldr	r1, [pc, #12]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	080052ac 	.word	0x080052ac

08001c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c4c:	f7ff ffdc 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0b5b      	lsrs	r3, r3, #13
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4903      	ldr	r1, [pc, #12]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	080052ac 	.word	0x080052ac

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c74:	b0ae      	sub	sp, #184	; 0xb8
 8001c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c96:	4bcb      	ldr	r3, [pc, #812]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	f200 8206 	bhi.w	80020b0 <HAL_RCC_GetSysClockFreq+0x440>
 8001ca4:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001caa:	bf00      	nop
 8001cac:	08001ce1 	.word	0x08001ce1
 8001cb0:	080020b1 	.word	0x080020b1
 8001cb4:	080020b1 	.word	0x080020b1
 8001cb8:	080020b1 	.word	0x080020b1
 8001cbc:	08001ce9 	.word	0x08001ce9
 8001cc0:	080020b1 	.word	0x080020b1
 8001cc4:	080020b1 	.word	0x080020b1
 8001cc8:	080020b1 	.word	0x080020b1
 8001ccc:	08001cf1 	.word	0x08001cf1
 8001cd0:	080020b1 	.word	0x080020b1
 8001cd4:	080020b1 	.word	0x080020b1
 8001cd8:	080020b1 	.word	0x080020b1
 8001cdc:	08001ee1 	.word	0x08001ee1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce0:	4bb9      	ldr	r3, [pc, #740]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001ce6:	e1e7      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce8:	4bb8      	ldr	r3, [pc, #736]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x35c>)
 8001cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cee:	e1e3      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf0:	4bb4      	ldr	r3, [pc, #720]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfc:	4bb1      	ldr	r3, [pc, #708]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d071      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d08:	4bae      	ldr	r3, [pc, #696]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d14:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d2e:	4622      	mov	r2, r4
 8001d30:	462b      	mov	r3, r5
 8001d32:	f04f 0000 	mov.w	r0, #0
 8001d36:	f04f 0100 	mov.w	r1, #0
 8001d3a:	0159      	lsls	r1, r3, #5
 8001d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d40:	0150      	lsls	r0, r2, #5
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4621      	mov	r1, r4
 8001d48:	1a51      	subs	r1, r2, r1
 8001d4a:	6439      	str	r1, [r7, #64]	; 0x40
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d52:	647b      	str	r3, [r7, #68]	; 0x44
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001d60:	4649      	mov	r1, r9
 8001d62:	018b      	lsls	r3, r1, #6
 8001d64:	4641      	mov	r1, r8
 8001d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d6a:	4641      	mov	r1, r8
 8001d6c:	018a      	lsls	r2, r1, #6
 8001d6e:	4641      	mov	r1, r8
 8001d70:	1a51      	subs	r1, r2, r1
 8001d72:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d74:	4649      	mov	r1, r9
 8001d76:	eb63 0301 	sbc.w	r3, r3, r1
 8001d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001d88:	4649      	mov	r1, r9
 8001d8a:	00cb      	lsls	r3, r1, #3
 8001d8c:	4641      	mov	r1, r8
 8001d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d92:	4641      	mov	r1, r8
 8001d94:	00ca      	lsls	r2, r1, #3
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4622      	mov	r2, r4
 8001d9e:	189b      	adds	r3, r3, r2
 8001da0:	633b      	str	r3, [r7, #48]	; 0x30
 8001da2:	462b      	mov	r3, r5
 8001da4:	460a      	mov	r2, r1
 8001da6:	eb42 0303 	adc.w	r3, r2, r3
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001db8:	4629      	mov	r1, r5
 8001dba:	024b      	lsls	r3, r1, #9
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	024a      	lsls	r2, r1, #9
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001dd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001dd8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ddc:	f7fe fa18 	bl	8000210 <__aeabi_uldivmod>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4613      	mov	r3, r2
 8001de6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001dea:	e067      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dec:	4b75      	ldr	r3, [pc, #468]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	099b      	lsrs	r3, r3, #6
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001df8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001dfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e06:	2300      	movs	r3, #0
 8001e08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e0a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001e0e:	4622      	mov	r2, r4
 8001e10:	462b      	mov	r3, r5
 8001e12:	f04f 0000 	mov.w	r0, #0
 8001e16:	f04f 0100 	mov.w	r1, #0
 8001e1a:	0159      	lsls	r1, r3, #5
 8001e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e20:	0150      	lsls	r0, r2, #5
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4621      	mov	r1, r4
 8001e28:	1a51      	subs	r1, r2, r1
 8001e2a:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001e40:	4649      	mov	r1, r9
 8001e42:	018b      	lsls	r3, r1, #6
 8001e44:	4641      	mov	r1, r8
 8001e46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e4a:	4641      	mov	r1, r8
 8001e4c:	018a      	lsls	r2, r1, #6
 8001e4e:	4641      	mov	r1, r8
 8001e50:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e54:	4649      	mov	r1, r9
 8001e56:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e66:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e6e:	4692      	mov	sl, r2
 8001e70:	469b      	mov	fp, r3
 8001e72:	4623      	mov	r3, r4
 8001e74:	eb1a 0303 	adds.w	r3, sl, r3
 8001e78:	623b      	str	r3, [r7, #32]
 8001e7a:	462b      	mov	r3, r5
 8001e7c:	eb4b 0303 	adc.w	r3, fp, r3
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e8e:	4629      	mov	r1, r5
 8001e90:	028b      	lsls	r3, r1, #10
 8001e92:	4621      	mov	r1, r4
 8001e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e98:	4621      	mov	r1, r4
 8001e9a:	028a      	lsls	r2, r1, #10
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	673b      	str	r3, [r7, #112]	; 0x70
 8001ea8:	677a      	str	r2, [r7, #116]	; 0x74
 8001eaa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001eae:	f7fe f9af 	bl	8000210 <__aeabi_uldivmod>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ebc:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	0c1b      	lsrs	r3, r3, #16
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001ece:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ed2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ede:	e0eb      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ee0:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eec:	4b35      	ldr	r3, [pc, #212]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d06b      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef8:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	2200      	movs	r2, #0
 8001f00:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	667b      	str	r3, [r7, #100]	; 0x64
 8001f10:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f14:	4622      	mov	r2, r4
 8001f16:	462b      	mov	r3, r5
 8001f18:	f04f 0000 	mov.w	r0, #0
 8001f1c:	f04f 0100 	mov.w	r1, #0
 8001f20:	0159      	lsls	r1, r3, #5
 8001f22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f26:	0150      	lsls	r0, r2, #5
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	1a51      	subs	r1, r2, r1
 8001f30:	61b9      	str	r1, [r7, #24]
 8001f32:	4629      	mov	r1, r5
 8001f34:	eb63 0301 	sbc.w	r3, r3, r1
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f46:	4659      	mov	r1, fp
 8001f48:	018b      	lsls	r3, r1, #6
 8001f4a:	4651      	mov	r1, sl
 8001f4c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f50:	4651      	mov	r1, sl
 8001f52:	018a      	lsls	r2, r1, #6
 8001f54:	4651      	mov	r1, sl
 8001f56:	ebb2 0801 	subs.w	r8, r2, r1
 8001f5a:	4659      	mov	r1, fp
 8001f5c:	eb63 0901 	sbc.w	r9, r3, r1
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f74:	4690      	mov	r8, r2
 8001f76:	4699      	mov	r9, r3
 8001f78:	4623      	mov	r3, r4
 8001f7a:	eb18 0303 	adds.w	r3, r8, r3
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	462b      	mov	r3, r5
 8001f82:	eb49 0303 	adc.w	r3, r9, r3
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f94:	4629      	mov	r1, r5
 8001f96:	024b      	lsls	r3, r1, #9
 8001f98:	4621      	mov	r1, r4
 8001f9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	024a      	lsls	r2, r1, #9
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001faa:	2200      	movs	r2, #0
 8001fac:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fb4:	f7fe f92c 	bl	8000210 <__aeabi_uldivmod>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fc2:	e065      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0x420>
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	00f42400 	.word	0x00f42400
 8001fcc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd0:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	099b      	lsrs	r3, r3, #6
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	4611      	mov	r1, r2
 8001fdc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fe0:	653b      	str	r3, [r7, #80]	; 0x50
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	657b      	str	r3, [r7, #84]	; 0x54
 8001fe6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001fea:	4642      	mov	r2, r8
 8001fec:	464b      	mov	r3, r9
 8001fee:	f04f 0000 	mov.w	r0, #0
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	0159      	lsls	r1, r3, #5
 8001ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ffc:	0150      	lsls	r0, r2, #5
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4641      	mov	r1, r8
 8002004:	1a51      	subs	r1, r2, r1
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	4649      	mov	r1, r9
 800200a:	eb63 0301 	sbc.w	r3, r3, r1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800201c:	4659      	mov	r1, fp
 800201e:	018b      	lsls	r3, r1, #6
 8002020:	4651      	mov	r1, sl
 8002022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002026:	4651      	mov	r1, sl
 8002028:	018a      	lsls	r2, r1, #6
 800202a:	4651      	mov	r1, sl
 800202c:	1a54      	subs	r4, r2, r1
 800202e:	4659      	mov	r1, fp
 8002030:	eb63 0501 	sbc.w	r5, r3, r1
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	00eb      	lsls	r3, r5, #3
 800203e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002042:	00e2      	lsls	r2, r4, #3
 8002044:	4614      	mov	r4, r2
 8002046:	461d      	mov	r5, r3
 8002048:	4643      	mov	r3, r8
 800204a:	18e3      	adds	r3, r4, r3
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	464b      	mov	r3, r9
 8002050:	eb45 0303 	adc.w	r3, r5, r3
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002062:	4629      	mov	r1, r5
 8002064:	028b      	lsls	r3, r1, #10
 8002066:	4621      	mov	r1, r4
 8002068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800206c:	4621      	mov	r1, r4
 800206e:	028a      	lsls	r2, r1, #10
 8002070:	4610      	mov	r0, r2
 8002072:	4619      	mov	r1, r3
 8002074:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002078:	2200      	movs	r2, #0
 800207a:	64bb      	str	r3, [r7, #72]	; 0x48
 800207c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800207e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002082:	f7fe f8c5 	bl	8000210 <__aeabi_uldivmod>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4613      	mov	r3, r2
 800208c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	0f1b      	lsrs	r3, r3, #28
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800209e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020ae:	e003      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80020b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	37b8      	adds	r7, #184	; 0xb8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	00f42400 	.word	0x00f42400

080020d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e28d      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8083 	beq.w	80021f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020f0:	4b94      	ldr	r3, [pc, #592]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d019      	beq.n	8002130 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020fc:	4b91      	ldr	r3, [pc, #580]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002104:	2b08      	cmp	r3, #8
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002108:	4b8e      	ldr	r3, [pc, #568]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002114:	d00c      	beq.n	8002130 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002116:	4b8b      	ldr	r3, [pc, #556]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d112      	bne.n	8002148 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002122:	4b88      	ldr	r3, [pc, #544]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800212e:	d10b      	bne.n	8002148 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	4b84      	ldr	r3, [pc, #528]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d05b      	beq.n	80021f4 <HAL_RCC_OscConfig+0x124>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d157      	bne.n	80021f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e25a      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002150:	d106      	bne.n	8002160 <HAL_RCC_OscConfig+0x90>
 8002152:	4b7c      	ldr	r3, [pc, #496]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a7b      	ldr	r2, [pc, #492]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e01d      	b.n	800219c <HAL_RCC_OscConfig+0xcc>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0xb4>
 800216a:	4b76      	ldr	r3, [pc, #472]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a75      	ldr	r2, [pc, #468]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b73      	ldr	r3, [pc, #460]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a72      	ldr	r2, [pc, #456]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0xcc>
 8002184:	4b6f      	ldr	r3, [pc, #444]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a6e      	ldr	r2, [pc, #440]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 800218a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b6c      	ldr	r3, [pc, #432]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a6b      	ldr	r2, [pc, #428]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d013      	beq.n	80021cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7ff f942 	bl	800142c <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ac:	f7ff f93e 	bl	800142c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e21f      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	4b61      	ldr	r3, [pc, #388]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0xdc>
 80021ca:	e014      	b.n	80021f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7ff f92e 	bl	800142c <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d4:	f7ff f92a 	bl	800142c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e20b      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	4b57      	ldr	r3, [pc, #348]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x104>
 80021f2:	e000      	b.n	80021f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d06f      	beq.n	80022e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002202:	4b50      	ldr	r3, [pc, #320]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b00      	cmp	r3, #0
 800220c:	d017      	beq.n	800223e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800220e:	4b4d      	ldr	r3, [pc, #308]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002216:	2b08      	cmp	r3, #8
 8002218:	d105      	bne.n	8002226 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800221a:	4b4a      	ldr	r3, [pc, #296]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d11c      	bne.n	800226c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002232:	4b44      	ldr	r3, [pc, #272]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d116      	bne.n	800226c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223e:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_RCC_OscConfig+0x186>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d001      	beq.n	8002256 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e1d3      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4937      	ldr	r1, [pc, #220]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	e03a      	b.n	80022e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002274:	4b34      	ldr	r3, [pc, #208]	; (8002348 <HAL_RCC_OscConfig+0x278>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7ff f8d7 	bl	800142c <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002282:	f7ff f8d3 	bl	800142c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e1b4      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	4b28      	ldr	r3, [pc, #160]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4925      	ldr	r1, [pc, #148]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b6:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_RCC_OscConfig+0x278>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7ff f8b6 	bl	800142c <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c4:	f7ff f8b2 	bl	800142c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e193      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d036      	beq.n	800235c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d016      	beq.n	8002324 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_RCC_OscConfig+0x27c>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fc:	f7ff f896 	bl	800142c <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002304:	f7ff f892 	bl	800142c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e173      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 8002318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x234>
 8002322:	e01b      	b.n	800235c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_RCC_OscConfig+0x27c>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232a:	f7ff f87f 	bl	800142c <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002330:	e00e      	b.n	8002350 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002332:	f7ff f87b 	bl	800142c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d907      	bls.n	8002350 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e15c      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
 8002344:	40023800 	.word	0x40023800
 8002348:	42470000 	.word	0x42470000
 800234c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002350:	4b8a      	ldr	r3, [pc, #552]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ea      	bne.n	8002332 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8097 	beq.w	8002498 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236e:	4b83      	ldr	r3, [pc, #524]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10f      	bne.n	800239a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	4b7f      	ldr	r3, [pc, #508]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a7e      	ldr	r2, [pc, #504]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
 800238a:	4b7c      	ldr	r3, [pc, #496]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002396:	2301      	movs	r3, #1
 8002398:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b79      	ldr	r3, [pc, #484]	; (8002580 <HAL_RCC_OscConfig+0x4b0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d118      	bne.n	80023d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a6:	4b76      	ldr	r3, [pc, #472]	; (8002580 <HAL_RCC_OscConfig+0x4b0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a75      	ldr	r2, [pc, #468]	; (8002580 <HAL_RCC_OscConfig+0x4b0>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b2:	f7ff f83b 	bl	800142c <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ba:	f7ff f837 	bl	800142c <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e118      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	4b6c      	ldr	r3, [pc, #432]	; (8002580 <HAL_RCC_OscConfig+0x4b0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d106      	bne.n	80023ee <HAL_RCC_OscConfig+0x31e>
 80023e0:	4b66      	ldr	r3, [pc, #408]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	4a65      	ldr	r2, [pc, #404]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6713      	str	r3, [r2, #112]	; 0x70
 80023ec:	e01c      	b.n	8002428 <HAL_RCC_OscConfig+0x358>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x340>
 80023f6:	4b61      	ldr	r3, [pc, #388]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	4a60      	ldr	r2, [pc, #384]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	6713      	str	r3, [r2, #112]	; 0x70
 8002402:	4b5e      	ldr	r3, [pc, #376]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	4a5d      	ldr	r2, [pc, #372]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6713      	str	r3, [r2, #112]	; 0x70
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0x358>
 8002410:	4b5a      	ldr	r3, [pc, #360]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	4a59      	ldr	r2, [pc, #356]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	6713      	str	r3, [r2, #112]	; 0x70
 800241c:	4b57      	ldr	r3, [pc, #348]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	4a56      	ldr	r2, [pc, #344]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002422:	f023 0304 	bic.w	r3, r3, #4
 8002426:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d015      	beq.n	800245c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7fe fffc 	bl	800142c <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002436:	e00a      	b.n	800244e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002438:	f7fe fff8 	bl	800142c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	; 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e0d7      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244e:	4b4b      	ldr	r3, [pc, #300]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0ee      	beq.n	8002438 <HAL_RCC_OscConfig+0x368>
 800245a:	e014      	b.n	8002486 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7fe ffe6 	bl	800142c <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002462:	e00a      	b.n	800247a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f7fe ffe2 	bl	800142c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e0c1      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247a:	4b40      	ldr	r3, [pc, #256]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1ee      	bne.n	8002464 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002486:	7dfb      	ldrb	r3, [r7, #23]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248c:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	4a3a      	ldr	r2, [pc, #232]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002496:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80ad 	beq.w	80025fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a2:	4b36      	ldr	r3, [pc, #216]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d060      	beq.n	8002570 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d145      	bne.n	8002542 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b33      	ldr	r3, [pc, #204]	; (8002584 <HAL_RCC_OscConfig+0x4b4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe ffb6 	bl	800142c <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe ffb2 	bl	800142c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e093      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	019b      	lsls	r3, r3, #6
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	3b01      	subs	r3, #1
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	071b      	lsls	r3, r3, #28
 800250e:	491b      	ldr	r1, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x4b4>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7fe ff87 	bl	800142c <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002522:	f7fe ff83 	bl	800142c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e064      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x452>
 8002540:	e05c      	b.n	80025fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_RCC_OscConfig+0x4b4>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe ff70 	bl	800142c <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe ff6c 	bl	800142c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e04d      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCC_OscConfig+0x4ac>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x480>
 800256e:	e045      	b.n	80025fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d107      	bne.n	8002588 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e040      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
 800257c:	40023800 	.word	0x40023800
 8002580:	40007000 	.word	0x40007000
 8002584:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002588:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <HAL_RCC_OscConfig+0x538>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d030      	beq.n	80025f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d129      	bne.n	80025f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d122      	bne.n	80025f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025b8:	4013      	ands	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d119      	bne.n	80025f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	085b      	lsrs	r3, r3, #1
 80025d0:	3b01      	subs	r3, #1
 80025d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d10f      	bne.n	80025f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800

0800260c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e042      	b.n	80026a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe fd38 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2224      	movs	r2, #36	; 0x24
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800264e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f82b 	bl	80026ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b0:	b0c0      	sub	sp, #256	; 0x100
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c8:	68d9      	ldr	r1, [r3, #12]
 80026ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	ea40 0301 	orr.w	r3, r0, r1
 80026d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002704:	f021 010c 	bic.w	r1, r1, #12
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002712:	430b      	orrs	r3, r1
 8002714:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002726:	6999      	ldr	r1, [r3, #24]
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	ea40 0301 	orr.w	r3, r0, r1
 8002732:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b8f      	ldr	r3, [pc, #572]	; (8002978 <UART_SetConfig+0x2cc>)
 800273c:	429a      	cmp	r2, r3
 800273e:	d005      	beq.n	800274c <UART_SetConfig+0xa0>
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4b8d      	ldr	r3, [pc, #564]	; (800297c <UART_SetConfig+0x2d0>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d104      	bne.n	8002756 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800274c:	f7ff fa7c 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8002750:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002754:	e003      	b.n	800275e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002756:	f7ff fa63 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 800275a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800275e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002768:	f040 810c 	bne.w	8002984 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800276c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002770:	2200      	movs	r2, #0
 8002772:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002776:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800277a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800277e:	4622      	mov	r2, r4
 8002780:	462b      	mov	r3, r5
 8002782:	1891      	adds	r1, r2, r2
 8002784:	65b9      	str	r1, [r7, #88]	; 0x58
 8002786:	415b      	adcs	r3, r3
 8002788:	65fb      	str	r3, [r7, #92]	; 0x5c
 800278a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800278e:	4621      	mov	r1, r4
 8002790:	eb12 0801 	adds.w	r8, r2, r1
 8002794:	4629      	mov	r1, r5
 8002796:	eb43 0901 	adc.w	r9, r3, r1
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ae:	4690      	mov	r8, r2
 80027b0:	4699      	mov	r9, r3
 80027b2:	4623      	mov	r3, r4
 80027b4:	eb18 0303 	adds.w	r3, r8, r3
 80027b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027bc:	462b      	mov	r3, r5
 80027be:	eb49 0303 	adc.w	r3, r9, r3
 80027c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027da:	460b      	mov	r3, r1
 80027dc:	18db      	adds	r3, r3, r3
 80027de:	653b      	str	r3, [r7, #80]	; 0x50
 80027e0:	4613      	mov	r3, r2
 80027e2:	eb42 0303 	adc.w	r3, r2, r3
 80027e6:	657b      	str	r3, [r7, #84]	; 0x54
 80027e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80027f0:	f7fd fd0e 	bl	8000210 <__aeabi_uldivmod>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4b61      	ldr	r3, [pc, #388]	; (8002980 <UART_SetConfig+0x2d4>)
 80027fa:	fba3 2302 	umull	r2, r3, r3, r2
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	011c      	lsls	r4, r3, #4
 8002802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002806:	2200      	movs	r2, #0
 8002808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800280c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002810:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002814:	4642      	mov	r2, r8
 8002816:	464b      	mov	r3, r9
 8002818:	1891      	adds	r1, r2, r2
 800281a:	64b9      	str	r1, [r7, #72]	; 0x48
 800281c:	415b      	adcs	r3, r3
 800281e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002820:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002824:	4641      	mov	r1, r8
 8002826:	eb12 0a01 	adds.w	sl, r2, r1
 800282a:	4649      	mov	r1, r9
 800282c:	eb43 0b01 	adc.w	fp, r3, r1
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800283c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002844:	4692      	mov	sl, r2
 8002846:	469b      	mov	fp, r3
 8002848:	4643      	mov	r3, r8
 800284a:	eb1a 0303 	adds.w	r3, sl, r3
 800284e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002852:	464b      	mov	r3, r9
 8002854:	eb4b 0303 	adc.w	r3, fp, r3
 8002858:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002868:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800286c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002870:	460b      	mov	r3, r1
 8002872:	18db      	adds	r3, r3, r3
 8002874:	643b      	str	r3, [r7, #64]	; 0x40
 8002876:	4613      	mov	r3, r2
 8002878:	eb42 0303 	adc.w	r3, r2, r3
 800287c:	647b      	str	r3, [r7, #68]	; 0x44
 800287e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002882:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002886:	f7fd fcc3 	bl	8000210 <__aeabi_uldivmod>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4611      	mov	r1, r2
 8002890:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <UART_SetConfig+0x2d4>)
 8002892:	fba3 2301 	umull	r2, r3, r3, r1
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2264      	movs	r2, #100	; 0x64
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	1acb      	subs	r3, r1, r3
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <UART_SetConfig+0x2d4>)
 80028a8:	fba3 2302 	umull	r2, r3, r3, r2
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028b4:	441c      	add	r4, r3
 80028b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ba:	2200      	movs	r2, #0
 80028bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028c8:	4642      	mov	r2, r8
 80028ca:	464b      	mov	r3, r9
 80028cc:	1891      	adds	r1, r2, r2
 80028ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80028d0:	415b      	adcs	r3, r3
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028d8:	4641      	mov	r1, r8
 80028da:	1851      	adds	r1, r2, r1
 80028dc:	6339      	str	r1, [r7, #48]	; 0x30
 80028de:	4649      	mov	r1, r9
 80028e0:	414b      	adcs	r3, r1
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80028f0:	4659      	mov	r1, fp
 80028f2:	00cb      	lsls	r3, r1, #3
 80028f4:	4651      	mov	r1, sl
 80028f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028fa:	4651      	mov	r1, sl
 80028fc:	00ca      	lsls	r2, r1, #3
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	4603      	mov	r3, r0
 8002904:	4642      	mov	r2, r8
 8002906:	189b      	adds	r3, r3, r2
 8002908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800290c:	464b      	mov	r3, r9
 800290e:	460a      	mov	r2, r1
 8002910:	eb42 0303 	adc.w	r3, r2, r3
 8002914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002924:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002928:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800292c:	460b      	mov	r3, r1
 800292e:	18db      	adds	r3, r3, r3
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
 8002932:	4613      	mov	r3, r2
 8002934:	eb42 0303 	adc.w	r3, r2, r3
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800293e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002942:	f7fd fc65 	bl	8000210 <__aeabi_uldivmod>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <UART_SetConfig+0x2d4>)
 800294c:	fba3 1302 	umull	r1, r3, r3, r2
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	2164      	movs	r1, #100	; 0x64
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	3332      	adds	r3, #50	; 0x32
 800295e:	4a08      	ldr	r2, [pc, #32]	; (8002980 <UART_SetConfig+0x2d4>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	f003 0207 	and.w	r2, r3, #7
 800296a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4422      	add	r2, r4
 8002972:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002974:	e106      	b.n	8002b84 <UART_SetConfig+0x4d8>
 8002976:	bf00      	nop
 8002978:	40011000 	.word	0x40011000
 800297c:	40011400 	.word	0x40011400
 8002980:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002988:	2200      	movs	r2, #0
 800298a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800298e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002992:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002996:	4642      	mov	r2, r8
 8002998:	464b      	mov	r3, r9
 800299a:	1891      	adds	r1, r2, r2
 800299c:	6239      	str	r1, [r7, #32]
 800299e:	415b      	adcs	r3, r3
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029a6:	4641      	mov	r1, r8
 80029a8:	1854      	adds	r4, r2, r1
 80029aa:	4649      	mov	r1, r9
 80029ac:	eb43 0501 	adc.w	r5, r3, r1
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	00eb      	lsls	r3, r5, #3
 80029ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029be:	00e2      	lsls	r2, r4, #3
 80029c0:	4614      	mov	r4, r2
 80029c2:	461d      	mov	r5, r3
 80029c4:	4643      	mov	r3, r8
 80029c6:	18e3      	adds	r3, r4, r3
 80029c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029cc:	464b      	mov	r3, r9
 80029ce:	eb45 0303 	adc.w	r3, r5, r3
 80029d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029f2:	4629      	mov	r1, r5
 80029f4:	008b      	lsls	r3, r1, #2
 80029f6:	4621      	mov	r1, r4
 80029f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029fc:	4621      	mov	r1, r4
 80029fe:	008a      	lsls	r2, r1, #2
 8002a00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a04:	f7fd fc04 	bl	8000210 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4b60      	ldr	r3, [pc, #384]	; (8002b90 <UART_SetConfig+0x4e4>)
 8002a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	011c      	lsls	r4, r3, #4
 8002a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a28:	4642      	mov	r2, r8
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	1891      	adds	r1, r2, r2
 8002a2e:	61b9      	str	r1, [r7, #24]
 8002a30:	415b      	adcs	r3, r3
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a38:	4641      	mov	r1, r8
 8002a3a:	1851      	adds	r1, r2, r1
 8002a3c:	6139      	str	r1, [r7, #16]
 8002a3e:	4649      	mov	r1, r9
 8002a40:	414b      	adcs	r3, r1
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a50:	4659      	mov	r1, fp
 8002a52:	00cb      	lsls	r3, r1, #3
 8002a54:	4651      	mov	r1, sl
 8002a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a5a:	4651      	mov	r1, sl
 8002a5c:	00ca      	lsls	r2, r1, #3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	4642      	mov	r2, r8
 8002a66:	189b      	adds	r3, r3, r2
 8002a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a6c:	464b      	mov	r3, r9
 8002a6e:	460a      	mov	r2, r1
 8002a70:	eb42 0303 	adc.w	r3, r2, r3
 8002a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a90:	4649      	mov	r1, r9
 8002a92:	008b      	lsls	r3, r1, #2
 8002a94:	4641      	mov	r1, r8
 8002a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a9a:	4641      	mov	r1, r8
 8002a9c:	008a      	lsls	r2, r1, #2
 8002a9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002aa2:	f7fd fbb5 	bl	8000210 <__aeabi_uldivmod>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4b38      	ldr	r3, [pc, #224]	; (8002b90 <UART_SetConfig+0x4e4>)
 8002aae:	fba3 2301 	umull	r2, r3, r3, r1
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2264      	movs	r2, #100	; 0x64
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	1acb      	subs	r3, r1, r3
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	3332      	adds	r3, #50	; 0x32
 8002ac0:	4a33      	ldr	r2, [pc, #204]	; (8002b90 <UART_SetConfig+0x4e4>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002acc:	441c      	add	r4, r3
 8002ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	673b      	str	r3, [r7, #112]	; 0x70
 8002ad6:	677a      	str	r2, [r7, #116]	; 0x74
 8002ad8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002adc:	4642      	mov	r2, r8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	1891      	adds	r1, r2, r2
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	415b      	adcs	r3, r3
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aec:	4641      	mov	r1, r8
 8002aee:	1851      	adds	r1, r2, r1
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	4649      	mov	r1, r9
 8002af4:	414b      	adcs	r3, r1
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b04:	4659      	mov	r1, fp
 8002b06:	00cb      	lsls	r3, r1, #3
 8002b08:	4651      	mov	r1, sl
 8002b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b0e:	4651      	mov	r1, sl
 8002b10:	00ca      	lsls	r2, r1, #3
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	4642      	mov	r2, r8
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b1e:	464b      	mov	r3, r9
 8002b20:	460a      	mov	r2, r1
 8002b22:	eb42 0303 	adc.w	r3, r2, r3
 8002b26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	663b      	str	r3, [r7, #96]	; 0x60
 8002b32:	667a      	str	r2, [r7, #100]	; 0x64
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b40:	4649      	mov	r1, r9
 8002b42:	008b      	lsls	r3, r1, #2
 8002b44:	4641      	mov	r1, r8
 8002b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b4a:	4641      	mov	r1, r8
 8002b4c:	008a      	lsls	r2, r1, #2
 8002b4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b52:	f7fd fb5d 	bl	8000210 <__aeabi_uldivmod>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <UART_SetConfig+0x4e4>)
 8002b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	2164      	movs	r1, #100	; 0x64
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	3332      	adds	r3, #50	; 0x32
 8002b6e:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <UART_SetConfig+0x4e4>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	f003 020f 	and.w	r2, r3, #15
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4422      	add	r2, r4
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b90:	51eb851f 	.word	0x51eb851f

08002b94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f103 0208 	add.w	r2, r3, #8
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f103 0208 	add.w	r2, r3, #8
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f103 0208 	add.w	r2, r3, #8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b085      	sub	sp, #20
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	601a      	str	r2, [r3, #0]
}
 8002c2a:	bf00      	nop
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c36:	b480      	push	{r7}
 8002c38:	b085      	sub	sp, #20
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d103      	bne.n	8002c56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e00c      	b.n	8002c70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3308      	adds	r3, #8
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	e002      	b.n	8002c64 <vListInsert+0x2e>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d2f6      	bcs.n	8002c5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	601a      	str	r2, [r3, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6892      	ldr	r2, [r2, #8]
 8002cbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6852      	ldr	r2, [r2, #4]
 8002cc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d103      	bne.n	8002cdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	1e5a      	subs	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d26:	f001 ff35 	bl	8004b94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	68f9      	ldr	r1, [r7, #12]
 8002d34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	441a      	add	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	3b01      	subs	r3, #1
 8002d58:	68f9      	ldr	r1, [r7, #12]
 8002d5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	441a      	add	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	22ff      	movs	r2, #255	; 0xff
 8002d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	22ff      	movs	r2, #255	; 0xff
 8002d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d114      	bne.n	8002da6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01a      	beq.n	8002dba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3310      	adds	r3, #16
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 f9f5 	bl	8004178 <xTaskRemoveFromEventList>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d012      	beq.n	8002dba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <xQueueGenericReset+0xcc>)
 8002d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	e009      	b.n	8002dba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3310      	adds	r3, #16
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fef2 	bl	8002b94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3324      	adds	r3, #36	; 0x24
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff feed 	bl	8002b94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002dba:	f001 ff1b 	bl	8004bf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002dbe:	2301      	movs	r3, #1
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	e000ed04 	.word	0xe000ed04

08002dcc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	613b      	str	r3, [r7, #16]
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	3348      	adds	r3, #72	; 0x48
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 ffe7 	bl	8004dd8 <pvPortMalloc>
 8002e0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d011      	beq.n	8002e36 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	3348      	adds	r3, #72	; 0x48
 8002e1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e24:	79fa      	ldrb	r2, [r7, #7]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f805 	bl	8002e40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e36:	69bb      	ldr	r3, [r7, #24]
	}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d103      	bne.n	8002e5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e002      	b.n	8002e62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e6e:	2101      	movs	r1, #1
 8002e70:	69b8      	ldr	r0, [r7, #24]
 8002e72:	f7ff ff43 	bl	8002cfc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00e      	beq.n	8002eaa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f81d 	bl	8002ee4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	6939      	ldr	r1, [r7, #16]
 8002eca:	6978      	ldr	r0, [r7, #20]
 8002ecc:	f7ff ff7e 	bl	8002dcc <xQueueGenericCreate>
 8002ed0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f7ff ffd3 	bl	8002e7e <prvInitialiseMutex>

		return xNewQueue;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
	}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08e      	sub	sp, #56	; 0x38
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <xQueueGenericSend+0x32>
	__asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f12:	bf00      	nop
 8002f14:	e7fe      	b.n	8002f14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d103      	bne.n	8002f24 <xQueueGenericSend+0x40>
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <xQueueGenericSend+0x44>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <xQueueGenericSend+0x46>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <xQueueGenericSend+0x60>
	__asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f40:	bf00      	nop
 8002f42:	e7fe      	b.n	8002f42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d103      	bne.n	8002f52 <xQueueGenericSend+0x6e>
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <xQueueGenericSend+0x72>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <xQueueGenericSend+0x74>
 8002f56:	2300      	movs	r3, #0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <xQueueGenericSend+0x8e>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	623b      	str	r3, [r7, #32]
}
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f72:	f001 fabd 	bl	80044f0 <xTaskGetSchedulerState>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <xQueueGenericSend+0x9e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <xQueueGenericSend+0xa2>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <xQueueGenericSend+0xa4>
 8002f86:	2300      	movs	r3, #0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	61fb      	str	r3, [r7, #28]
}
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fa2:	f001 fdf7 	bl	8004b94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d302      	bcc.n	8002fb8 <xQueueGenericSend+0xd4>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d129      	bne.n	800300c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fbe:	f000 fb21 	bl	8003604 <prvCopyDataToQueue>
 8002fc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d010      	beq.n	8002fee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	3324      	adds	r3, #36	; 0x24
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f001 f8d1 	bl	8004178 <xTaskRemoveFromEventList>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fdc:	4b3f      	ldr	r3, [pc, #252]	; (80030dc <xQueueGenericSend+0x1f8>)
 8002fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	e00a      	b.n	8003004 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d007      	beq.n	8003004 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ff4:	4b39      	ldr	r3, [pc, #228]	; (80030dc <xQueueGenericSend+0x1f8>)
 8002ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003004:	f001 fdf6 	bl	8004bf4 <vPortExitCritical>
				return pdPASS;
 8003008:	2301      	movs	r3, #1
 800300a:	e063      	b.n	80030d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003012:	f001 fdef 	bl	8004bf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003016:	2300      	movs	r3, #0
 8003018:	e05c      	b.n	80030d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	2b00      	cmp	r3, #0
 800301e:	d106      	bne.n	800302e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	4618      	mov	r0, r3
 8003026:	f001 f909 	bl	800423c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800302a:	2301      	movs	r3, #1
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800302e:	f001 fde1 	bl	8004bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003032:	f000 feaf 	bl	8003d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003036:	f001 fdad 	bl	8004b94 <vPortEnterCritical>
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003040:	b25b      	sxtb	r3, r3
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003046:	d103      	bne.n	8003050 <xQueueGenericSend+0x16c>
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003056:	b25b      	sxtb	r3, r3
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d103      	bne.n	8003066 <xQueueGenericSend+0x182>
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003066:	f001 fdc5 	bl	8004bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800306a:	1d3a      	adds	r2, r7, #4
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f001 f8f8 	bl	8004268 <xTaskCheckForTimeOut>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d124      	bne.n	80030c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800307e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003080:	f000 fbb8 	bl	80037f4 <prvIsQueueFull>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d018      	beq.n	80030bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	3310      	adds	r3, #16
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	f001 f84c 	bl	8004130 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800309a:	f000 fb43 	bl	8003724 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800309e:	f000 fe87 	bl	8003db0 <xTaskResumeAll>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f47f af7c 	bne.w	8002fa2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80030aa:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <xQueueGenericSend+0x1f8>)
 80030ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	e772      	b.n	8002fa2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030be:	f000 fb31 	bl	8003724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030c2:	f000 fe75 	bl	8003db0 <xTaskResumeAll>
 80030c6:	e76c      	b.n	8002fa2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ca:	f000 fb2b 	bl	8003724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030ce:	f000 fe6f 	bl	8003db0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3738      	adds	r7, #56	; 0x38
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	e000ed04 	.word	0xe000ed04

080030e0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08e      	sub	sp, #56	; 0x38
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80030ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10a      	bne.n	800310a <xQueueGiveFromISR+0x2a>
	__asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	623b      	str	r3, [r7, #32]
}
 8003106:	bf00      	nop
 8003108:	e7fe      	b.n	8003108 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	61fb      	str	r3, [r7, #28]
}
 8003124:	bf00      	nop
 8003126:	e7fe      	b.n	8003126 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <xQueueGiveFromISR+0x58>
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <xQueueGiveFromISR+0x5c>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <xQueueGiveFromISR+0x5e>
 800313c:	2300      	movs	r3, #0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	61bb      	str	r3, [r7, #24]
}
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003158:	f001 fdfe 	bl	8004d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800315c:	f3ef 8211 	mrs	r2, BASEPRI
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	617a      	str	r2, [r7, #20]
 8003172:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003174:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003184:	429a      	cmp	r2, r3
 8003186:	d22b      	bcs.n	80031e0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800318e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800319a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800319e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a2:	d112      	bne.n	80031ca <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d016      	beq.n	80031da <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	3324      	adds	r3, #36	; 0x24
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 ffe1 	bl	8004178 <xTaskRemoveFromEventList>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00e      	beq.n	80031da <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2201      	movs	r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e007      	b.n	80031da <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031ce:	3301      	adds	r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	b25a      	sxtb	r2, r3
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031da:	2301      	movs	r3, #1
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
 80031de:	e001      	b.n	80031e4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	637b      	str	r3, [r7, #52]	; 0x34
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3738      	adds	r7, #56	; 0x38
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08c      	sub	sp, #48	; 0x30
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003208:	2300      	movs	r3, #0
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <xQueueReceive+0x30>
	__asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	623b      	str	r3, [r7, #32]
}
 8003228:	bf00      	nop
 800322a:	e7fe      	b.n	800322a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <xQueueReceive+0x3e>
 8003232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <xQueueReceive+0x42>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <xQueueReceive+0x44>
 800323e:	2300      	movs	r3, #0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <xQueueReceive+0x5e>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	61fb      	str	r3, [r7, #28]
}
 8003256:	bf00      	nop
 8003258:	e7fe      	b.n	8003258 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800325a:	f001 f949 	bl	80044f0 <xTaskGetSchedulerState>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <xQueueReceive+0x6e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <xQueueReceive+0x72>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <xQueueReceive+0x74>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10a      	bne.n	800328a <xQueueReceive+0x8e>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	61bb      	str	r3, [r7, #24]
}
 8003286:	bf00      	nop
 8003288:	e7fe      	b.n	8003288 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800328a:	f001 fc83 	bl	8004b94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01f      	beq.n	80032da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800329e:	f000 fa1b 	bl	80036d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	1e5a      	subs	r2, r3, #1
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00f      	beq.n	80032d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	3310      	adds	r3, #16
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 ff5e 	bl	8004178 <xTaskRemoveFromEventList>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032c2:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <xQueueReceive+0x1bc>)
 80032c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032d2:	f001 fc8f 	bl	8004bf4 <vPortExitCritical>
				return pdPASS;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e069      	b.n	80033ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d103      	bne.n	80032e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032e0:	f001 fc88 	bl	8004bf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e062      	b.n	80033ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032ee:	f107 0310 	add.w	r3, r7, #16
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 ffa2 	bl	800423c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032f8:	2301      	movs	r3, #1
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032fc:	f001 fc7a 	bl	8004bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003300:	f000 fd48 	bl	8003d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003304:	f001 fc46 	bl	8004b94 <vPortEnterCritical>
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800330e:	b25b      	sxtb	r3, r3
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d103      	bne.n	800331e <xQueueReceive+0x122>
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003324:	b25b      	sxtb	r3, r3
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	d103      	bne.n	8003334 <xQueueReceive+0x138>
 800332c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003334:	f001 fc5e 	bl	8004bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003338:	1d3a      	adds	r2, r7, #4
 800333a:	f107 0310 	add.w	r3, r7, #16
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f000 ff91 	bl	8004268 <xTaskCheckForTimeOut>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d123      	bne.n	8003394 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800334c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800334e:	f000 fa3b 	bl	80037c8 <prvIsQueueEmpty>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d017      	beq.n	8003388 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	3324      	adds	r3, #36	; 0x24
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4611      	mov	r1, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fee5 	bl	8004130 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003368:	f000 f9dc 	bl	8003724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800336c:	f000 fd20 	bl	8003db0 <xTaskResumeAll>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d189      	bne.n	800328a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <xQueueReceive+0x1bc>)
 8003378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	e780      	b.n	800328a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800338a:	f000 f9cb 	bl	8003724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800338e:	f000 fd0f 	bl	8003db0 <xTaskResumeAll>
 8003392:	e77a      	b.n	800328a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003396:	f000 f9c5 	bl	8003724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800339a:	f000 fd09 	bl	8003db0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800339e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033a0:	f000 fa12 	bl	80037c8 <prvIsQueueEmpty>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f43f af6f 	beq.w	800328a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3730      	adds	r7, #48	; 0x30
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08e      	sub	sp, #56	; 0x38
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80033ce:	2300      	movs	r3, #0
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <xQueueSemaphoreTake+0x32>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	623b      	str	r3, [r7, #32]
}
 80033ea:	bf00      	nop
 80033ec:	e7fe      	b.n	80033ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <xQueueSemaphoreTake+0x50>
	__asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	61fb      	str	r3, [r7, #28]
}
 8003408:	bf00      	nop
 800340a:	e7fe      	b.n	800340a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800340c:	f001 f870 	bl	80044f0 <xTaskGetSchedulerState>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <xQueueSemaphoreTake+0x60>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <xQueueSemaphoreTake+0x64>
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <xQueueSemaphoreTake+0x66>
 8003420:	2300      	movs	r3, #0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	61bb      	str	r3, [r7, #24]
}
 8003438:	bf00      	nop
 800343a:	e7fe      	b.n	800343a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800343c:	f001 fbaa 	bl	8004b94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d024      	beq.n	8003496 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	1e5a      	subs	r2, r3, #1
 8003450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003452:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800345c:	f001 f9f0 	bl	8004840 <pvTaskIncrementMutexHeldCount>
 8003460:	4602      	mov	r2, r0
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00f      	beq.n	800348e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	3310      	adds	r3, #16
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fe80 	bl	8004178 <xTaskRemoveFromEventList>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800347e:	4b54      	ldr	r3, [pc, #336]	; (80035d0 <xQueueSemaphoreTake+0x214>)
 8003480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800348e:	f001 fbb1 	bl	8004bf4 <vPortExitCritical>
				return pdPASS;
 8003492:	2301      	movs	r3, #1
 8003494:	e097      	b.n	80035c6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d111      	bne.n	80034c0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	617b      	str	r3, [r7, #20]
}
 80034b4:	bf00      	nop
 80034b6:	e7fe      	b.n	80034b6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80034b8:	f001 fb9c 	bl	8004bf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80034bc:	2300      	movs	r3, #0
 80034be:	e082      	b.n	80035c6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034c6:	f107 030c 	add.w	r3, r7, #12
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 feb6 	bl	800423c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034d0:	2301      	movs	r3, #1
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034d4:	f001 fb8e 	bl	8004bf4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034d8:	f000 fc5c 	bl	8003d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034dc:	f001 fb5a 	bl	8004b94 <vPortEnterCritical>
 80034e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034e6:	b25b      	sxtb	r3, r3
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ec:	d103      	bne.n	80034f6 <xQueueSemaphoreTake+0x13a>
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034fc:	b25b      	sxtb	r3, r3
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d103      	bne.n	800350c <xQueueSemaphoreTake+0x150>
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800350c:	f001 fb72 	bl	8004bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003510:	463a      	mov	r2, r7
 8003512:	f107 030c 	add.w	r3, r7, #12
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fea5 	bl	8004268 <xTaskCheckForTimeOut>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d132      	bne.n	800358a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003526:	f000 f94f 	bl	80037c8 <prvIsQueueEmpty>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d026      	beq.n	800357e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003538:	f001 fb2c 	bl	8004b94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fff3 	bl	800452c <xTaskPriorityInherit>
 8003546:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003548:	f001 fb54 	bl	8004bf4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	3324      	adds	r3, #36	; 0x24
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fdeb 	bl	8004130 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800355a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800355c:	f000 f8e2 	bl	8003724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003560:	f000 fc26 	bl	8003db0 <xTaskResumeAll>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	f47f af68 	bne.w	800343c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800356c:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <xQueueSemaphoreTake+0x214>)
 800356e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	e75e      	b.n	800343c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800357e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003580:	f000 f8d0 	bl	8003724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003584:	f000 fc14 	bl	8003db0 <xTaskResumeAll>
 8003588:	e758      	b.n	800343c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800358a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800358c:	f000 f8ca 	bl	8003724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003590:	f000 fc0e 	bl	8003db0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003596:	f000 f917 	bl	80037c8 <prvIsQueueEmpty>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	f43f af4d 	beq.w	800343c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00d      	beq.n	80035c4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80035a8:	f001 faf4 	bl	8004b94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80035ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035ae:	f000 f811 	bl	80035d4 <prvGetDisinheritPriorityAfterTimeout>
 80035b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 f8b2 	bl	8004724 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80035c0:	f001 fb18 	bl	8004bf4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3738      	adds	r7, #56	; 0x38
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	e000ed04 	.word	0xe000ed04

080035d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d006      	beq.n	80035f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f1c3 0307 	rsb	r3, r3, #7
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e001      	b.n	80035f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80035f6:	68fb      	ldr	r3, [r7, #12]
	}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10d      	bne.n	800363e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d14d      	bne.n	80036c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fff2 	bl	8004618 <xTaskPriorityDisinherit>
 8003634:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	e043      	b.n	80036c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d119      	bne.n	8003678 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6858      	ldr	r0, [r3, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	461a      	mov	r2, r3
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	f001 fdd8 	bl	8005204 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	441a      	add	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	429a      	cmp	r2, r3
 800366c:	d32b      	bcc.n	80036c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	e026      	b.n	80036c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68d8      	ldr	r0, [r3, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	461a      	mov	r2, r3
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	f001 fdbe 	bl	8005204 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	425b      	negs	r3, r3
 8003692:	441a      	add	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d207      	bcs.n	80036b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	425b      	negs	r3, r3
 80036ae:	441a      	add	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d105      	bne.n	80036c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80036ce:	697b      	ldr	r3, [r7, #20]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d018      	beq.n	800371c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	441a      	add	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	429a      	cmp	r2, r3
 8003702:	d303      	bcc.n	800370c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68d9      	ldr	r1, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	461a      	mov	r2, r3
 8003716:	6838      	ldr	r0, [r7, #0]
 8003718:	f001 fd74 	bl	8005204 <memcpy>
	}
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800372c:	f001 fa32 	bl	8004b94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003736:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003738:	e011      	b.n	800375e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	2b00      	cmp	r3, #0
 8003740:	d012      	beq.n	8003768 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3324      	adds	r3, #36	; 0x24
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fd16 	bl	8004178 <xTaskRemoveFromEventList>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003752:	f000 fdeb 	bl	800432c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	3b01      	subs	r3, #1
 800375a:	b2db      	uxtb	r3, r3
 800375c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800375e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	dce9      	bgt.n	800373a <prvUnlockQueue+0x16>
 8003766:	e000      	b.n	800376a <prvUnlockQueue+0x46>
					break;
 8003768:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	22ff      	movs	r2, #255	; 0xff
 800376e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003772:	f001 fa3f 	bl	8004bf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003776:	f001 fa0d 	bl	8004b94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003780:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003782:	e011      	b.n	80037a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d012      	beq.n	80037b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3310      	adds	r3, #16
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fcf1 	bl	8004178 <xTaskRemoveFromEventList>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800379c:	f000 fdc6 	bl	800432c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037a0:	7bbb      	ldrb	r3, [r7, #14]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	dce9      	bgt.n	8003784 <prvUnlockQueue+0x60>
 80037b0:	e000      	b.n	80037b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	22ff      	movs	r2, #255	; 0xff
 80037b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80037bc:	f001 fa1a 	bl	8004bf4 <vPortExitCritical>
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037d0:	f001 f9e0 	bl	8004b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d102      	bne.n	80037e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80037dc:	2301      	movs	r3, #1
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	e001      	b.n	80037e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037e6:	f001 fa05 	bl	8004bf4 <vPortExitCritical>

	return xReturn;
 80037ea:	68fb      	ldr	r3, [r7, #12]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037fc:	f001 f9ca 	bl	8004b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003808:	429a      	cmp	r2, r3
 800380a:	d102      	bne.n	8003812 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800380c:	2301      	movs	r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e001      	b.n	8003816 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003816:	f001 f9ed 	bl	8004bf4 <vPortExitCritical>

	return xReturn;
 800381a:	68fb      	ldr	r3, [r7, #12]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08e      	sub	sp, #56	; 0x38
 8003828:	af04      	add	r7, sp, #16
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	623b      	str	r3, [r7, #32]
}
 800384a:	bf00      	nop
 800384c:	e7fe      	b.n	800384c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800384e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <xTaskCreateStatic+0x46>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	61fb      	str	r3, [r7, #28]
}
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800386a:	2354      	movs	r3, #84	; 0x54
 800386c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	2b54      	cmp	r3, #84	; 0x54
 8003872:	d00a      	beq.n	800388a <xTaskCreateStatic+0x66>
	__asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	61bb      	str	r3, [r7, #24]
}
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800388a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800388c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01e      	beq.n	80038d0 <xTaskCreateStatic+0xac>
 8003892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01b      	beq.n	80038d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038aa:	2300      	movs	r3, #0
 80038ac:	9303      	str	r3, [sp, #12]
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	9302      	str	r3, [sp, #8]
 80038b2:	f107 0314 	add.w	r3, r7, #20
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f850 	bl	8003968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ca:	f000 f8d5 	bl	8003a78 <prvAddNewTaskToReadyList>
 80038ce:	e001      	b.n	80038d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038d4:	697b      	ldr	r3, [r7, #20]
	}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3728      	adds	r7, #40	; 0x28
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b08c      	sub	sp, #48	; 0x30
 80038e2:	af04      	add	r7, sp, #16
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	4613      	mov	r3, r2
 80038ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 fa70 	bl	8004dd8 <pvPortMalloc>
 80038f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00e      	beq.n	800391e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003900:	2054      	movs	r0, #84	; 0x54
 8003902:	f001 fa69 	bl	8004dd8 <pvPortMalloc>
 8003906:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
 8003914:	e005      	b.n	8003922 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003916:	6978      	ldr	r0, [r7, #20]
 8003918:	f001 fb2a 	bl	8004f70 <vPortFree>
 800391c:	e001      	b.n	8003922 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d017      	beq.n	8003958 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003930:	88fa      	ldrh	r2, [r7, #6]
 8003932:	2300      	movs	r3, #0
 8003934:	9303      	str	r3, [sp, #12]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	9302      	str	r3, [sp, #8]
 800393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f80e 	bl	8003968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800394c:	69f8      	ldr	r0, [r7, #28]
 800394e:	f000 f893 	bl	8003a78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003952:	2301      	movs	r3, #1
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e002      	b.n	800395e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003958:	f04f 33ff 	mov.w	r3, #4294967295
 800395c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800395e:	69bb      	ldr	r3, [r7, #24]
	}
 8003960:	4618      	mov	r0, r3
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003980:	3b01      	subs	r3, #1
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f023 0307 	bic.w	r3, r3, #7
 800398e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	617b      	str	r3, [r7, #20]
}
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01f      	beq.n	80039f6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	e012      	b.n	80039e2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	7819      	ldrb	r1, [r3, #0]
 80039c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	3334      	adds	r3, #52	; 0x34
 80039cc:	460a      	mov	r2, r1
 80039ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d006      	beq.n	80039ea <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	3301      	adds	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2b0f      	cmp	r3, #15
 80039e6:	d9e9      	bls.n	80039bc <prvInitialiseNewTask+0x54>
 80039e8:	e000      	b.n	80039ec <prvInitialiseNewTask+0x84>
			{
				break;
 80039ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039f4:	e003      	b.n	80039fe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	2b06      	cmp	r3, #6
 8003a02:	d901      	bls.n	8003a08 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a04:	2306      	movs	r3, #6
 8003a06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a12:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	2200      	movs	r2, #0
 8003a18:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff f8d8 	bl	8002bd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	3318      	adds	r3, #24
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff f8d3 	bl	8002bd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a36:	f1c3 0207 	rsb	r2, r3, #7
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	2200      	movs	r2, #0
 8003a48:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	69b8      	ldr	r0, [r7, #24]
 8003a58:	f000 ff6c 	bl	8004934 <pxPortInitialiseStack>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a6e:	bf00      	nop
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a80:	f001 f888 	bl	8004b94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a84:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <prvAddNewTaskToReadyList+0xb8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	4a29      	ldr	r2, [pc, #164]	; (8003b30 <prvAddNewTaskToReadyList+0xb8>)
 8003a8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a8e:	4b29      	ldr	r3, [pc, #164]	; (8003b34 <prvAddNewTaskToReadyList+0xbc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a96:	4a27      	ldr	r2, [pc, #156]	; (8003b34 <prvAddNewTaskToReadyList+0xbc>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a9c:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <prvAddNewTaskToReadyList+0xb8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d110      	bne.n	8003ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003aa4:	f000 fc66 	bl	8004374 <prvInitialiseTaskLists>
 8003aa8:	e00d      	b.n	8003ac6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003aaa:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <prvAddNewTaskToReadyList+0xc0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ab2:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <prvAddNewTaskToReadyList+0xbc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d802      	bhi.n	8003ac6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ac0:	4a1c      	ldr	r2, [pc, #112]	; (8003b34 <prvAddNewTaskToReadyList+0xbc>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <prvAddNewTaskToReadyList+0xc4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3301      	adds	r3, #1
 8003acc:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <prvAddNewTaskToReadyList+0xc4>)
 8003ace:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <prvAddNewTaskToReadyList+0xc8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	4a18      	ldr	r2, [pc, #96]	; (8003b40 <prvAddNewTaskToReadyList+0xc8>)
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <prvAddNewTaskToReadyList+0xcc>)
 8003af0:	441a      	add	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3304      	adds	r3, #4
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f7ff f878 	bl	8002bee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003afe:	f001 f879 	bl	8004bf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b02:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <prvAddNewTaskToReadyList+0xc0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00e      	beq.n	8003b28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <prvAddNewTaskToReadyList+0xbc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d207      	bcs.n	8003b28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <prvAddNewTaskToReadyList+0xd0>)
 8003b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b28:	bf00      	nop
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000414 	.word	0x20000414
 8003b34:	20000314 	.word	0x20000314
 8003b38:	20000420 	.word	0x20000420
 8003b3c:	20000430 	.word	0x20000430
 8003b40:	2000041c 	.word	0x2000041c
 8003b44:	20000318 	.word	0x20000318
 8003b48:	e000ed04 	.word	0xe000ed04

08003b4c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003b54:	f001 f81e 	bl	8004b94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <vTaskDelete+0x18>
 8003b5e:	4b39      	ldr	r3, [pc, #228]	; (8003c44 <vTaskDelete+0xf8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	e000      	b.n	8003b66 <vTaskDelete+0x1a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff f89b 	bl	8002ca8 <uxListRemove>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d115      	bne.n	8003ba4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	4932      	ldr	r1, [pc, #200]	; (8003c48 <vTaskDelete+0xfc>)
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <vTaskDelete+0x58>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	2201      	movs	r2, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43da      	mvns	r2, r3
 8003b9a:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <vTaskDelete+0x100>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	4a2a      	ldr	r2, [pc, #168]	; (8003c4c <vTaskDelete+0x100>)
 8003ba2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d004      	beq.n	8003bb6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3318      	adds	r3, #24
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff f879 	bl	8002ca8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003bb6:	4b26      	ldr	r3, [pc, #152]	; (8003c50 <vTaskDelete+0x104>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	4a24      	ldr	r2, [pc, #144]	; (8003c50 <vTaskDelete+0x104>)
 8003bbe:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003bc0:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <vTaskDelete+0xf8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d10b      	bne.n	8003be2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4820      	ldr	r0, [pc, #128]	; (8003c54 <vTaskDelete+0x108>)
 8003bd2:	f7ff f80c 	bl	8002bee <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003bd6:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <vTaskDelete+0x10c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	4a1e      	ldr	r2, [pc, #120]	; (8003c58 <vTaskDelete+0x10c>)
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	e009      	b.n	8003bf6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003be2:	4b1e      	ldr	r3, [pc, #120]	; (8003c5c <vTaskDelete+0x110>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <vTaskDelete+0x110>)
 8003bea:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 fc2f 	bl	8004450 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003bf2:	f000 fc5d 	bl	80044b0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003bf6:	f000 fffd 	bl	8004bf4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003bfa:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <vTaskDelete+0x114>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01b      	beq.n	8003c3a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <vTaskDelete+0xf8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d116      	bne.n	8003c3a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003c0c:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <vTaskDelete+0x118>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <vTaskDelete+0xde>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	60bb      	str	r3, [r7, #8]
}
 8003c26:	bf00      	nop
 8003c28:	e7fe      	b.n	8003c28 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003c2a:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <vTaskDelete+0x11c>)
 8003c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000314 	.word	0x20000314
 8003c48:	20000318 	.word	0x20000318
 8003c4c:	2000041c 	.word	0x2000041c
 8003c50:	20000430 	.word	0x20000430
 8003c54:	200003e8 	.word	0x200003e8
 8003c58:	200003fc 	.word	0x200003fc
 8003c5c:	20000414 	.word	0x20000414
 8003c60:	20000420 	.word	0x20000420
 8003c64:	2000043c 	.word	0x2000043c
 8003c68:	e000ed04 	.word	0xe000ed04

08003c6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d017      	beq.n	8003cae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c7e:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <vTaskDelay+0x60>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <vTaskDelay+0x30>
	__asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	60bb      	str	r3, [r7, #8]
}
 8003c98:	bf00      	nop
 8003c9a:	e7fe      	b.n	8003c9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c9c:	f000 f87a 	bl	8003d94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fde0 	bl	8004868 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ca8:	f000 f882 	bl	8003db0 <xTaskResumeAll>
 8003cac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d107      	bne.n	8003cc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003cb4:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <vTaskDelay+0x64>)
 8003cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	2000043c 	.word	0x2000043c
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ce2:	463a      	mov	r2, r7
 8003ce4:	1d39      	adds	r1, r7, #4
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fc0e 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cf0:	6839      	ldr	r1, [r7, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	9202      	str	r2, [sp, #8]
 8003cf8:	9301      	str	r3, [sp, #4]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	460a      	mov	r2, r1
 8003d02:	491e      	ldr	r1, [pc, #120]	; (8003d7c <vTaskStartScheduler+0xa8>)
 8003d04:	481e      	ldr	r0, [pc, #120]	; (8003d80 <vTaskStartScheduler+0xac>)
 8003d06:	f7ff fd8d 	bl	8003824 <xTaskCreateStatic>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <vTaskStartScheduler+0xb0>)
 8003d0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d10:	4b1c      	ldr	r3, [pc, #112]	; (8003d84 <vTaskStartScheduler+0xb0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e001      	b.n	8003d22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d116      	bne.n	8003d56 <vTaskStartScheduler+0x82>
	__asm volatile
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	613b      	str	r3, [r7, #16]
}
 8003d3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d3c:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <vTaskStartScheduler+0xb4>)
 8003d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <vTaskStartScheduler+0xb8>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d4a:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <vTaskStartScheduler+0xbc>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d50:	f000 fe7e 	bl	8004a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d54:	e00e      	b.n	8003d74 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d10a      	bne.n	8003d74 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	60fb      	str	r3, [r7, #12]
}
 8003d70:	bf00      	nop
 8003d72:	e7fe      	b.n	8003d72 <vTaskStartScheduler+0x9e>
}
 8003d74:	bf00      	nop
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	08005294 	.word	0x08005294
 8003d80:	08004345 	.word	0x08004345
 8003d84:	20000438 	.word	0x20000438
 8003d88:	20000434 	.word	0x20000434
 8003d8c:	20000420 	.word	0x20000420
 8003d90:	20000418 	.word	0x20000418

08003d94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <vTaskSuspendAll+0x18>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	4a03      	ldr	r2, [pc, #12]	; (8003dac <vTaskSuspendAll+0x18>)
 8003da0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003da2:	bf00      	nop
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	2000043c 	.word	0x2000043c

08003db0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dbe:	4b41      	ldr	r3, [pc, #260]	; (8003ec4 <xTaskResumeAll+0x114>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <xTaskResumeAll+0x2c>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	603b      	str	r3, [r7, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ddc:	f000 feda 	bl	8004b94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003de0:	4b38      	ldr	r3, [pc, #224]	; (8003ec4 <xTaskResumeAll+0x114>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	4a37      	ldr	r2, [pc, #220]	; (8003ec4 <xTaskResumeAll+0x114>)
 8003de8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dea:	4b36      	ldr	r3, [pc, #216]	; (8003ec4 <xTaskResumeAll+0x114>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d161      	bne.n	8003eb6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003df2:	4b35      	ldr	r3, [pc, #212]	; (8003ec8 <xTaskResumeAll+0x118>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d05d      	beq.n	8003eb6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dfa:	e02e      	b.n	8003e5a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dfc:	4b33      	ldr	r3, [pc, #204]	; (8003ecc <xTaskResumeAll+0x11c>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	3318      	adds	r3, #24
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe ff4d 	bl	8002ca8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe ff48 	bl	8002ca8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <xTaskResumeAll+0x120>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	4a2a      	ldr	r2, [pc, #168]	; (8003ed0 <xTaskResumeAll+0x120>)
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <xTaskResumeAll+0x124>)
 8003e38:	441a      	add	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f7fe fed4 	bl	8002bee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4a:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <xTaskResumeAll+0x128>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d302      	bcc.n	8003e5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e54:	4b21      	ldr	r3, [pc, #132]	; (8003edc <xTaskResumeAll+0x12c>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <xTaskResumeAll+0x11c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1cc      	bne.n	8003dfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e68:	f000 fb22 	bl	80044b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <xTaskResumeAll+0x130>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d010      	beq.n	8003e9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e78:	f000 f846 	bl	8003f08 <xTaskIncrementTick>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e82:	4b16      	ldr	r3, [pc, #88]	; (8003edc <xTaskResumeAll+0x12c>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f1      	bne.n	8003e78 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003e94:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <xTaskResumeAll+0x130>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e9a:	4b10      	ldr	r3, [pc, #64]	; (8003edc <xTaskResumeAll+0x12c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <xTaskResumeAll+0x134>)
 8003ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003eb6:	f000 fe9d 	bl	8004bf4 <vPortExitCritical>

	return xAlreadyYielded;
 8003eba:	68bb      	ldr	r3, [r7, #8]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	2000043c 	.word	0x2000043c
 8003ec8:	20000414 	.word	0x20000414
 8003ecc:	200003d4 	.word	0x200003d4
 8003ed0:	2000041c 	.word	0x2000041c
 8003ed4:	20000318 	.word	0x20000318
 8003ed8:	20000314 	.word	0x20000314
 8003edc:	20000428 	.word	0x20000428
 8003ee0:	20000424 	.word	0x20000424
 8003ee4:	e000ed04 	.word	0xe000ed04

08003ee8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <xTaskGetTickCount+0x1c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ef4:	687b      	ldr	r3, [r7, #4]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	20000418 	.word	0x20000418

08003f08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f12:	4b4e      	ldr	r3, [pc, #312]	; (800404c <xTaskIncrementTick+0x144>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f040 808e 	bne.w	8004038 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f1c:	4b4c      	ldr	r3, [pc, #304]	; (8004050 <xTaskIncrementTick+0x148>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3301      	adds	r3, #1
 8003f22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f24:	4a4a      	ldr	r2, [pc, #296]	; (8004050 <xTaskIncrementTick+0x148>)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d120      	bne.n	8003f72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f30:	4b48      	ldr	r3, [pc, #288]	; (8004054 <xTaskIncrementTick+0x14c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	603b      	str	r3, [r7, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	e7fe      	b.n	8003f4e <xTaskIncrementTick+0x46>
 8003f50:	4b40      	ldr	r3, [pc, #256]	; (8004054 <xTaskIncrementTick+0x14c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	4b40      	ldr	r3, [pc, #256]	; (8004058 <xTaskIncrementTick+0x150>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a3e      	ldr	r2, [pc, #248]	; (8004054 <xTaskIncrementTick+0x14c>)
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4a3e      	ldr	r2, [pc, #248]	; (8004058 <xTaskIncrementTick+0x150>)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	4b3d      	ldr	r3, [pc, #244]	; (800405c <xTaskIncrementTick+0x154>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	4a3c      	ldr	r2, [pc, #240]	; (800405c <xTaskIncrementTick+0x154>)
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	f000 fa9f 	bl	80044b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f72:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <xTaskIncrementTick+0x158>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d348      	bcc.n	800400e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f7c:	4b35      	ldr	r3, [pc, #212]	; (8004054 <xTaskIncrementTick+0x14c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f86:	4b36      	ldr	r3, [pc, #216]	; (8004060 <xTaskIncrementTick+0x158>)
 8003f88:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8c:	601a      	str	r2, [r3, #0]
					break;
 8003f8e:	e03e      	b.n	800400e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f90:	4b30      	ldr	r3, [pc, #192]	; (8004054 <xTaskIncrementTick+0x14c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d203      	bcs.n	8003fb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fa8:	4a2d      	ldr	r2, [pc, #180]	; (8004060 <xTaskIncrementTick+0x158>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fae:	e02e      	b.n	800400e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe fe77 	bl	8002ca8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	3318      	adds	r3, #24
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe fe6e 	bl	8002ca8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	4b23      	ldr	r3, [pc, #140]	; (8004064 <xTaskIncrementTick+0x15c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	4a22      	ldr	r2, [pc, #136]	; (8004064 <xTaskIncrementTick+0x15c>)
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <xTaskIncrementTick+0x160>)
 8003fec:	441a      	add	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7fe fdfa 	bl	8002bee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	; (800406c <xTaskIncrementTick+0x164>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	429a      	cmp	r2, r3
 8004006:	d3b9      	bcc.n	8003f7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004008:	2301      	movs	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800400c:	e7b6      	b.n	8003f7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800400e:	4b17      	ldr	r3, [pc, #92]	; (800406c <xTaskIncrementTick+0x164>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	4914      	ldr	r1, [pc, #80]	; (8004068 <xTaskIncrementTick+0x160>)
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d901      	bls.n	800402a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004026:	2301      	movs	r3, #1
 8004028:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800402a:	4b11      	ldr	r3, [pc, #68]	; (8004070 <xTaskIncrementTick+0x168>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d007      	beq.n	8004042 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004032:	2301      	movs	r3, #1
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	e004      	b.n	8004042 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004038:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <xTaskIncrementTick+0x16c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3301      	adds	r3, #1
 800403e:	4a0d      	ldr	r2, [pc, #52]	; (8004074 <xTaskIncrementTick+0x16c>)
 8004040:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004042:	697b      	ldr	r3, [r7, #20]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	2000043c 	.word	0x2000043c
 8004050:	20000418 	.word	0x20000418
 8004054:	200003cc 	.word	0x200003cc
 8004058:	200003d0 	.word	0x200003d0
 800405c:	2000042c 	.word	0x2000042c
 8004060:	20000434 	.word	0x20000434
 8004064:	2000041c 	.word	0x2000041c
 8004068:	20000318 	.word	0x20000318
 800406c:	20000314 	.word	0x20000314
 8004070:	20000428 	.word	0x20000428
 8004074:	20000424 	.word	0x20000424

08004078 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800407e:	4b27      	ldr	r3, [pc, #156]	; (800411c <vTaskSwitchContext+0xa4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004086:	4b26      	ldr	r3, [pc, #152]	; (8004120 <vTaskSwitchContext+0xa8>)
 8004088:	2201      	movs	r2, #1
 800408a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800408c:	e03f      	b.n	800410e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800408e:	4b24      	ldr	r3, [pc, #144]	; (8004120 <vTaskSwitchContext+0xa8>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004094:	4b23      	ldr	r3, [pc, #140]	; (8004124 <vTaskSwitchContext+0xac>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040a2:	7afb      	ldrb	r3, [r7, #11]
 80040a4:	f1c3 031f 	rsb	r3, r3, #31
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	491f      	ldr	r1, [pc, #124]	; (8004128 <vTaskSwitchContext+0xb0>)
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10a      	bne.n	80040d4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	607b      	str	r3, [r7, #4]
}
 80040d0:	bf00      	nop
 80040d2:	e7fe      	b.n	80040d2 <vTaskSwitchContext+0x5a>
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4a12      	ldr	r2, [pc, #72]	; (8004128 <vTaskSwitchContext+0xb0>)
 80040e0:	4413      	add	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	3308      	adds	r3, #8
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d104      	bne.n	8004104 <vTaskSwitchContext+0x8c>
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	4a08      	ldr	r2, [pc, #32]	; (800412c <vTaskSwitchContext+0xb4>)
 800410c:	6013      	str	r3, [r2, #0]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	2000043c 	.word	0x2000043c
 8004120:	20000428 	.word	0x20000428
 8004124:	2000041c 	.word	0x2000041c
 8004128:	20000318 	.word	0x20000318
 800412c:	20000314 	.word	0x20000314

08004130 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	60fb      	str	r3, [r7, #12]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004156:	4b07      	ldr	r3, [pc, #28]	; (8004174 <vTaskPlaceOnEventList+0x44>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3318      	adds	r3, #24
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fe fd69 	bl	8002c36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004164:	2101      	movs	r1, #1
 8004166:	6838      	ldr	r0, [r7, #0]
 8004168:	f000 fb7e 	bl	8004868 <prvAddCurrentTaskToDelayedList>
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20000314 	.word	0x20000314

08004178 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10a      	bne.n	80041a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	60fb      	str	r3, [r7, #12]
}
 80041a0:	bf00      	nop
 80041a2:	e7fe      	b.n	80041a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	3318      	adds	r3, #24
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe fd7d 	bl	8002ca8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ae:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <xTaskRemoveFromEventList+0xac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d11c      	bne.n	80041f0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe fd74 	bl	8002ca8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	2201      	movs	r2, #1
 80041c6:	409a      	lsls	r2, r3
 80041c8:	4b17      	ldr	r3, [pc, #92]	; (8004228 <xTaskRemoveFromEventList+0xb0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	4a16      	ldr	r2, [pc, #88]	; (8004228 <xTaskRemoveFromEventList+0xb0>)
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4a13      	ldr	r2, [pc, #76]	; (800422c <xTaskRemoveFromEventList+0xb4>)
 80041e0:	441a      	add	r2, r3
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f7fe fd00 	bl	8002bee <vListInsertEnd>
 80041ee:	e005      	b.n	80041fc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	3318      	adds	r3, #24
 80041f4:	4619      	mov	r1, r3
 80041f6:	480e      	ldr	r0, [pc, #56]	; (8004230 <xTaskRemoveFromEventList+0xb8>)
 80041f8:	f7fe fcf9 	bl	8002bee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <xTaskRemoveFromEventList+0xbc>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	429a      	cmp	r2, r3
 8004208:	d905      	bls.n	8004216 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800420a:	2301      	movs	r3, #1
 800420c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800420e:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <xTaskRemoveFromEventList+0xc0>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	e001      	b.n	800421a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800421a:	697b      	ldr	r3, [r7, #20]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	2000043c 	.word	0x2000043c
 8004228:	2000041c 	.word	0x2000041c
 800422c:	20000318 	.word	0x20000318
 8004230:	200003d4 	.word	0x200003d4
 8004234:	20000314 	.word	0x20000314
 8004238:	20000428 	.word	0x20000428

0800423c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <vTaskInternalSetTimeOutState+0x24>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <vTaskInternalSetTimeOutState+0x28>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	605a      	str	r2, [r3, #4]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	2000042c 	.word	0x2000042c
 8004264:	20000418 	.word	0x20000418

08004268 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	613b      	str	r3, [r7, #16]
}
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	60fb      	str	r3, [r7, #12]
}
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80042aa:	f000 fc73 	bl	8004b94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042ae:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <xTaskCheckForTimeOut+0xbc>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c6:	d102      	bne.n	80042ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	e023      	b.n	8004316 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	4b15      	ldr	r3, [pc, #84]	; (8004328 <xTaskCheckForTimeOut+0xc0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d007      	beq.n	80042ea <xTaskCheckForTimeOut+0x82>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d302      	bcc.n	80042ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042e4:	2301      	movs	r3, #1
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	e015      	b.n	8004316 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d20b      	bcs.n	800430c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1ad2      	subs	r2, r2, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff ff9b 	bl	800423c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004306:	2300      	movs	r3, #0
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	e004      	b.n	8004316 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004312:	2301      	movs	r3, #1
 8004314:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004316:	f000 fc6d 	bl	8004bf4 <vPortExitCritical>

	return xReturn;
 800431a:	69fb      	ldr	r3, [r7, #28]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3720      	adds	r7, #32
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20000418 	.word	0x20000418
 8004328:	2000042c 	.word	0x2000042c

0800432c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004330:	4b03      	ldr	r3, [pc, #12]	; (8004340 <vTaskMissedYield+0x14>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]
}
 8004336:	bf00      	nop
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	20000428 	.word	0x20000428

08004344 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800434c:	f000 f852 	bl	80043f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <prvIdleTask+0x28>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d9f9      	bls.n	800434c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <prvIdleTask+0x2c>)
 800435a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004368:	e7f0      	b.n	800434c <prvIdleTask+0x8>
 800436a:	bf00      	nop
 800436c:	20000318 	.word	0x20000318
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800437a:	2300      	movs	r3, #0
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	e00c      	b.n	800439a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4a12      	ldr	r2, [pc, #72]	; (80043d4 <prvInitialiseTaskLists+0x60>)
 800438c:	4413      	add	r3, r2
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe fc00 	bl	8002b94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3301      	adds	r3, #1
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b06      	cmp	r3, #6
 800439e:	d9ef      	bls.n	8004380 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043a0:	480d      	ldr	r0, [pc, #52]	; (80043d8 <prvInitialiseTaskLists+0x64>)
 80043a2:	f7fe fbf7 	bl	8002b94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043a6:	480d      	ldr	r0, [pc, #52]	; (80043dc <prvInitialiseTaskLists+0x68>)
 80043a8:	f7fe fbf4 	bl	8002b94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043ac:	480c      	ldr	r0, [pc, #48]	; (80043e0 <prvInitialiseTaskLists+0x6c>)
 80043ae:	f7fe fbf1 	bl	8002b94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043b2:	480c      	ldr	r0, [pc, #48]	; (80043e4 <prvInitialiseTaskLists+0x70>)
 80043b4:	f7fe fbee 	bl	8002b94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043b8:	480b      	ldr	r0, [pc, #44]	; (80043e8 <prvInitialiseTaskLists+0x74>)
 80043ba:	f7fe fbeb 	bl	8002b94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043be:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <prvInitialiseTaskLists+0x78>)
 80043c0:	4a05      	ldr	r2, [pc, #20]	; (80043d8 <prvInitialiseTaskLists+0x64>)
 80043c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <prvInitialiseTaskLists+0x7c>)
 80043c6:	4a05      	ldr	r2, [pc, #20]	; (80043dc <prvInitialiseTaskLists+0x68>)
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000318 	.word	0x20000318
 80043d8:	200003a4 	.word	0x200003a4
 80043dc:	200003b8 	.word	0x200003b8
 80043e0:	200003d4 	.word	0x200003d4
 80043e4:	200003e8 	.word	0x200003e8
 80043e8:	20000400 	.word	0x20000400
 80043ec:	200003cc 	.word	0x200003cc
 80043f0:	200003d0 	.word	0x200003d0

080043f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043fa:	e019      	b.n	8004430 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043fc:	f000 fbca 	bl	8004b94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004400:	4b10      	ldr	r3, [pc, #64]	; (8004444 <prvCheckTasksWaitingTermination+0x50>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe fc4b 	bl	8002ca8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004412:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <prvCheckTasksWaitingTermination+0x54>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3b01      	subs	r3, #1
 8004418:	4a0b      	ldr	r2, [pc, #44]	; (8004448 <prvCheckTasksWaitingTermination+0x54>)
 800441a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <prvCheckTasksWaitingTermination+0x58>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3b01      	subs	r3, #1
 8004422:	4a0a      	ldr	r2, [pc, #40]	; (800444c <prvCheckTasksWaitingTermination+0x58>)
 8004424:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004426:	f000 fbe5 	bl	8004bf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f810 	bl	8004450 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004430:	4b06      	ldr	r3, [pc, #24]	; (800444c <prvCheckTasksWaitingTermination+0x58>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e1      	bne.n	80043fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	200003e8 	.word	0x200003e8
 8004448:	20000414 	.word	0x20000414
 800444c:	200003fc 	.word	0x200003fc

08004450 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800445e:	2b00      	cmp	r3, #0
 8004460:	d108      	bne.n	8004474 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fd82 	bl	8004f70 <vPortFree>
				vPortFree( pxTCB );
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fd7f 	bl	8004f70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004472:	e018      	b.n	80044a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800447a:	2b01      	cmp	r3, #1
 800447c:	d103      	bne.n	8004486 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fd76 	bl	8004f70 <vPortFree>
	}
 8004484:	e00f      	b.n	80044a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800448c:	2b02      	cmp	r3, #2
 800448e:	d00a      	beq.n	80044a6 <prvDeleteTCB+0x56>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	60fb      	str	r3, [r7, #12]
}
 80044a2:	bf00      	nop
 80044a4:	e7fe      	b.n	80044a4 <prvDeleteTCB+0x54>
	}
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <prvResetNextTaskUnblockTime+0x38>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d104      	bne.n	80044ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044c0:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <prvResetNextTaskUnblockTime+0x3c>)
 80044c2:	f04f 32ff 	mov.w	r2, #4294967295
 80044c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044c8:	e008      	b.n	80044dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044ca:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <prvResetNextTaskUnblockTime+0x38>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4a04      	ldr	r2, [pc, #16]	; (80044ec <prvResetNextTaskUnblockTime+0x3c>)
 80044da:	6013      	str	r3, [r2, #0]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	200003cc 	.word	0x200003cc
 80044ec:	20000434 	.word	0x20000434

080044f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <xTaskGetSchedulerState+0x34>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044fe:	2301      	movs	r3, #1
 8004500:	607b      	str	r3, [r7, #4]
 8004502:	e008      	b.n	8004516 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004504:	4b08      	ldr	r3, [pc, #32]	; (8004528 <xTaskGetSchedulerState+0x38>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d102      	bne.n	8004512 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800450c:	2302      	movs	r3, #2
 800450e:	607b      	str	r3, [r7, #4]
 8004510:	e001      	b.n	8004516 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004512:	2300      	movs	r3, #0
 8004514:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004516:	687b      	ldr	r3, [r7, #4]
	}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	20000420 	.word	0x20000420
 8004528:	2000043c 	.word	0x2000043c

0800452c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d05e      	beq.n	8004600 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004546:	4b31      	ldr	r3, [pc, #196]	; (800460c <xTaskPriorityInherit+0xe0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	429a      	cmp	r2, r3
 800454e:	d24e      	bcs.n	80045ee <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	db06      	blt.n	8004566 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004558:	4b2c      	ldr	r3, [pc, #176]	; (800460c <xTaskPriorityInherit+0xe0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	f1c3 0207 	rsb	r2, r3, #7
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	6959      	ldr	r1, [r3, #20]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4a26      	ldr	r2, [pc, #152]	; (8004610 <xTaskPriorityInherit+0xe4>)
 8004578:	4413      	add	r3, r2
 800457a:	4299      	cmp	r1, r3
 800457c:	d12f      	bne.n	80045de <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	3304      	adds	r3, #4
 8004582:	4618      	mov	r0, r3
 8004584:	f7fe fb90 	bl	8002ca8 <uxListRemove>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	2201      	movs	r2, #1
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43da      	mvns	r2, r3
 800459a:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <xTaskPriorityInherit+0xe8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4013      	ands	r3, r2
 80045a0:	4a1c      	ldr	r2, [pc, #112]	; (8004614 <xTaskPriorityInherit+0xe8>)
 80045a2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045a4:	4b19      	ldr	r3, [pc, #100]	; (800460c <xTaskPriorityInherit+0xe0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	2201      	movs	r2, #1
 80045b4:	409a      	lsls	r2, r3
 80045b6:	4b17      	ldr	r3, [pc, #92]	; (8004614 <xTaskPriorityInherit+0xe8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	4a15      	ldr	r2, [pc, #84]	; (8004614 <xTaskPriorityInherit+0xe8>)
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4a10      	ldr	r2, [pc, #64]	; (8004610 <xTaskPriorityInherit+0xe4>)
 80045ce:	441a      	add	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4619      	mov	r1, r3
 80045d6:	4610      	mov	r0, r2
 80045d8:	f7fe fb09 	bl	8002bee <vListInsertEnd>
 80045dc:	e004      	b.n	80045e8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045de:	4b0b      	ldr	r3, [pc, #44]	; (800460c <xTaskPriorityInherit+0xe0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	e008      	b.n	8004600 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <xTaskPriorityInherit+0xe0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d201      	bcs.n	8004600 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80045fc:	2301      	movs	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004600:	68fb      	ldr	r3, [r7, #12]
	}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000314 	.word	0x20000314
 8004610:	20000318 	.word	0x20000318
 8004614:	2000041c 	.word	0x2000041c

08004618 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d06e      	beq.n	800470c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800462e:	4b3a      	ldr	r3, [pc, #232]	; (8004718 <xTaskPriorityDisinherit+0x100>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	429a      	cmp	r2, r3
 8004636:	d00a      	beq.n	800464e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	60fb      	str	r3, [r7, #12]
}
 800464a:	bf00      	nop
 800464c:	e7fe      	b.n	800464c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	60bb      	str	r3, [r7, #8]
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004670:	1e5a      	subs	r2, r3, #1
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	429a      	cmp	r2, r3
 8004680:	d044      	beq.n	800470c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004686:	2b00      	cmp	r3, #0
 8004688:	d140      	bne.n	800470c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	3304      	adds	r3, #4
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe fb0a 	bl	8002ca8 <uxListRemove>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d115      	bne.n	80046c6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469e:	491f      	ldr	r1, [pc, #124]	; (800471c <xTaskPriorityDisinherit+0x104>)
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <xTaskPriorityDisinherit+0xae>
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	2201      	movs	r2, #1
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43da      	mvns	r2, r3
 80046bc:	4b18      	ldr	r3, [pc, #96]	; (8004720 <xTaskPriorityDisinherit+0x108>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4013      	ands	r3, r2
 80046c2:	4a17      	ldr	r2, [pc, #92]	; (8004720 <xTaskPriorityDisinherit+0x108>)
 80046c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	f1c3 0207 	rsb	r2, r3, #7
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	2201      	movs	r2, #1
 80046e0:	409a      	lsls	r2, r3
 80046e2:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <xTaskPriorityDisinherit+0x108>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	4a0d      	ldr	r2, [pc, #52]	; (8004720 <xTaskPriorityDisinherit+0x108>)
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4a08      	ldr	r2, [pc, #32]	; (800471c <xTaskPriorityDisinherit+0x104>)
 80046fa:	441a      	add	r2, r3
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f7fe fa73 	bl	8002bee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004708:	2301      	movs	r3, #1
 800470a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800470c:	697b      	ldr	r3, [r7, #20]
	}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000314 	.word	0x20000314
 800471c:	20000318 	.word	0x20000318
 8004720:	2000041c 	.word	0x2000041c

08004724 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004732:	2301      	movs	r3, #1
 8004734:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d077      	beq.n	800482c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	60fb      	str	r3, [r7, #12]
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d902      	bls.n	800476a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	e002      	b.n	8004770 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	429a      	cmp	r2, r3
 8004778:	d058      	beq.n	800482c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	429a      	cmp	r2, r3
 8004782:	d153      	bne.n	800482c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004784:	4b2b      	ldr	r3, [pc, #172]	; (8004834 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	429a      	cmp	r2, r3
 800478c:	d10a      	bne.n	80047a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	60bb      	str	r3, [r7, #8]
}
 80047a0:	bf00      	nop
 80047a2:	e7fe      	b.n	80047a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	69fa      	ldr	r2, [r7, #28]
 80047ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	db04      	blt.n	80047c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f1c3 0207 	rsb	r2, r3, #7
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	6959      	ldr	r1, [r3, #20]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4a19      	ldr	r2, [pc, #100]	; (8004838 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80047d2:	4413      	add	r3, r2
 80047d4:	4299      	cmp	r1, r3
 80047d6:	d129      	bne.n	800482c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	3304      	adds	r3, #4
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe fa63 	bl	8002ca8 <uxListRemove>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	2201      	movs	r2, #1
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	43da      	mvns	r2, r3
 80047f4:	4b11      	ldr	r3, [pc, #68]	; (800483c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4013      	ands	r3, r2
 80047fa:	4a10      	ldr	r2, [pc, #64]	; (800483c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80047fc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	2201      	movs	r2, #1
 8004804:	409a      	lsls	r2, r3
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4313      	orrs	r3, r2
 800480c:	4a0b      	ldr	r2, [pc, #44]	; (800483c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4a06      	ldr	r2, [pc, #24]	; (8004838 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800481e:	441a      	add	r2, r3
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	3304      	adds	r3, #4
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f7fe f9e1 	bl	8002bee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800482c:	bf00      	nop
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000314 	.word	0x20000314
 8004838:	20000318 	.word	0x20000318
 800483c:	2000041c 	.word	0x2000041c

08004840 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004844:	4b07      	ldr	r3, [pc, #28]	; (8004864 <pvTaskIncrementMutexHeldCount+0x24>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d004      	beq.n	8004856 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <pvTaskIncrementMutexHeldCount+0x24>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004852:	3201      	adds	r2, #1
 8004854:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004856:	4b03      	ldr	r3, [pc, #12]	; (8004864 <pvTaskIncrementMutexHeldCount+0x24>)
 8004858:	681b      	ldr	r3, [r3, #0]
	}
 800485a:	4618      	mov	r0, r3
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	20000314 	.word	0x20000314

08004868 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004872:	4b29      	ldr	r3, [pc, #164]	; (8004918 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004878:	4b28      	ldr	r3, [pc, #160]	; (800491c <prvAddCurrentTaskToDelayedList+0xb4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3304      	adds	r3, #4
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe fa12 	bl	8002ca8 <uxListRemove>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800488a:	4b24      	ldr	r3, [pc, #144]	; (800491c <prvAddCurrentTaskToDelayedList+0xb4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	2201      	movs	r2, #1
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43da      	mvns	r2, r3
 8004898:	4b21      	ldr	r3, [pc, #132]	; (8004920 <prvAddCurrentTaskToDelayedList+0xb8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4013      	ands	r3, r2
 800489e:	4a20      	ldr	r2, [pc, #128]	; (8004920 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a8:	d10a      	bne.n	80048c0 <prvAddCurrentTaskToDelayedList+0x58>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048b0:	4b1a      	ldr	r3, [pc, #104]	; (800491c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3304      	adds	r3, #4
 80048b6:	4619      	mov	r1, r3
 80048b8:	481a      	ldr	r0, [pc, #104]	; (8004924 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048ba:	f7fe f998 	bl	8002bee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048be:	e026      	b.n	800490e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048c8:	4b14      	ldr	r3, [pc, #80]	; (800491c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d209      	bcs.n	80048ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048d8:	4b13      	ldr	r3, [pc, #76]	; (8004928 <prvAddCurrentTaskToDelayedList+0xc0>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4b0f      	ldr	r3, [pc, #60]	; (800491c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	4610      	mov	r0, r2
 80048e6:	f7fe f9a6 	bl	8002c36 <vListInsert>
}
 80048ea:	e010      	b.n	800490e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048ec:	4b0f      	ldr	r3, [pc, #60]	; (800492c <prvAddCurrentTaskToDelayedList+0xc4>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4b0a      	ldr	r3, [pc, #40]	; (800491c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3304      	adds	r3, #4
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f7fe f99c 	bl	8002c36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048fe:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	429a      	cmp	r2, r3
 8004906:	d202      	bcs.n	800490e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004908:	4a09      	ldr	r2, [pc, #36]	; (8004930 <prvAddCurrentTaskToDelayedList+0xc8>)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6013      	str	r3, [r2, #0]
}
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000418 	.word	0x20000418
 800491c:	20000314 	.word	0x20000314
 8004920:	2000041c 	.word	0x2000041c
 8004924:	20000400 	.word	0x20000400
 8004928:	200003d0 	.word	0x200003d0
 800492c:	200003cc 	.word	0x200003cc
 8004930:	20000434 	.word	0x20000434

08004934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3b04      	subs	r3, #4
 8004944:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800494c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3b04      	subs	r3, #4
 8004952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f023 0201 	bic.w	r2, r3, #1
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3b04      	subs	r3, #4
 8004962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004964:	4a0c      	ldr	r2, [pc, #48]	; (8004998 <pxPortInitialiseStack+0x64>)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3b14      	subs	r3, #20
 800496e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3b04      	subs	r3, #4
 800497a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f06f 0202 	mvn.w	r2, #2
 8004982:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3b20      	subs	r3, #32
 8004988:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800498a:	68fb      	ldr	r3, [r7, #12]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	0800499d 	.word	0x0800499d

0800499c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049a6:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <prvTaskExitError+0x54>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d00a      	beq.n	80049c6 <prvTaskExitError+0x2a>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	60fb      	str	r3, [r7, #12]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <prvTaskExitError+0x28>
	__asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	60bb      	str	r3, [r7, #8]
}
 80049d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049da:	bf00      	nop
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0fc      	beq.n	80049dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049e2:	bf00      	nop
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	2000000c 	.word	0x2000000c
	...

08004a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <pxCurrentTCBConst2>)
 8004a02:	6819      	ldr	r1, [r3, #0]
 8004a04:	6808      	ldr	r0, [r1, #0]
 8004a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0a:	f380 8809 	msr	PSP, r0
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f380 8811 	msr	BASEPRI, r0
 8004a1a:	4770      	bx	lr
 8004a1c:	f3af 8000 	nop.w

08004a20 <pxCurrentTCBConst2>:
 8004a20:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop

08004a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a28:	4808      	ldr	r0, [pc, #32]	; (8004a4c <prvPortStartFirstTask+0x24>)
 8004a2a:	6800      	ldr	r0, [r0, #0]
 8004a2c:	6800      	ldr	r0, [r0, #0]
 8004a2e:	f380 8808 	msr	MSP, r0
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	f380 8814 	msr	CONTROL, r0
 8004a3a:	b662      	cpsie	i
 8004a3c:	b661      	cpsie	f
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	df00      	svc	0
 8004a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a4a:	bf00      	nop
 8004a4c:	e000ed08 	.word	0xe000ed08

08004a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a56:	4b46      	ldr	r3, [pc, #280]	; (8004b70 <xPortStartScheduler+0x120>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a46      	ldr	r2, [pc, #280]	; (8004b74 <xPortStartScheduler+0x124>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d10a      	bne.n	8004a76 <xPortStartScheduler+0x26>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	613b      	str	r3, [r7, #16]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a76:	4b3e      	ldr	r3, [pc, #248]	; (8004b70 <xPortStartScheduler+0x120>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a3f      	ldr	r2, [pc, #252]	; (8004b78 <xPortStartScheduler+0x128>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10a      	bne.n	8004a96 <xPortStartScheduler+0x46>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	60fb      	str	r3, [r7, #12]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a96:	4b39      	ldr	r3, [pc, #228]	; (8004b7c <xPortStartScheduler+0x12c>)
 8004a98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	22ff      	movs	r2, #255	; 0xff
 8004aa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	4b31      	ldr	r3, [pc, #196]	; (8004b80 <xPortStartScheduler+0x130>)
 8004abc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004abe:	4b31      	ldr	r3, [pc, #196]	; (8004b84 <xPortStartScheduler+0x134>)
 8004ac0:	2207      	movs	r2, #7
 8004ac2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ac4:	e009      	b.n	8004ada <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ac6:	4b2f      	ldr	r3, [pc, #188]	; (8004b84 <xPortStartScheduler+0x134>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	4a2d      	ldr	r2, [pc, #180]	; (8004b84 <xPortStartScheduler+0x134>)
 8004ace:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d0ef      	beq.n	8004ac6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ae6:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <xPortStartScheduler+0x134>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f1c3 0307 	rsb	r3, r3, #7
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d00a      	beq.n	8004b08 <xPortStartScheduler+0xb8>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	60bb      	str	r3, [r7, #8]
}
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b08:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <xPortStartScheduler+0x134>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	4a1d      	ldr	r2, [pc, #116]	; (8004b84 <xPortStartScheduler+0x134>)
 8004b10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b12:	4b1c      	ldr	r3, [pc, #112]	; (8004b84 <xPortStartScheduler+0x134>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b1a:	4a1a      	ldr	r2, [pc, #104]	; (8004b84 <xPortStartScheduler+0x134>)
 8004b1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b26:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <xPortStartScheduler+0x138>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <xPortStartScheduler+0x138>)
 8004b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <xPortStartScheduler+0x138>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a14      	ldr	r2, [pc, #80]	; (8004b88 <xPortStartScheduler+0x138>)
 8004b38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b3e:	f000 f8dd 	bl	8004cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <xPortStartScheduler+0x13c>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b48:	f000 f8fc 	bl	8004d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b4c:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <xPortStartScheduler+0x140>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a0f      	ldr	r2, [pc, #60]	; (8004b90 <xPortStartScheduler+0x140>)
 8004b52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b58:	f7ff ff66 	bl	8004a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b5c:	f7ff fa8c 	bl	8004078 <vTaskSwitchContext>
	prvTaskExitError();
 8004b60:	f7ff ff1c 	bl	800499c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	e000ed00 	.word	0xe000ed00
 8004b74:	410fc271 	.word	0x410fc271
 8004b78:	410fc270 	.word	0x410fc270
 8004b7c:	e000e400 	.word	0xe000e400
 8004b80:	20000440 	.word	0x20000440
 8004b84:	20000444 	.word	0x20000444
 8004b88:	e000ed20 	.word	0xe000ed20
 8004b8c:	2000000c 	.word	0x2000000c
 8004b90:	e000ef34 	.word	0xe000ef34

08004b94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	607b      	str	r3, [r7, #4]
}
 8004bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <vPortEnterCritical+0x58>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	4a0d      	ldr	r2, [pc, #52]	; (8004bec <vPortEnterCritical+0x58>)
 8004bb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <vPortEnterCritical+0x58>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10f      	bne.n	8004be0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <vPortEnterCritical+0x5c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	603b      	str	r3, [r7, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	e7fe      	b.n	8004bde <vPortEnterCritical+0x4a>
	}
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	2000000c 	.word	0x2000000c
 8004bf0:	e000ed04 	.word	0xe000ed04

08004bf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bfa:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <vPortExitCritical+0x50>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <vPortExitCritical+0x24>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	607b      	str	r3, [r7, #4]
}
 8004c14:	bf00      	nop
 8004c16:	e7fe      	b.n	8004c16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c18:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <vPortExitCritical+0x50>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <vPortExitCritical+0x50>)
 8004c20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c22:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <vPortExitCritical+0x50>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d105      	bne.n	8004c36 <vPortExitCritical+0x42>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	f383 8811 	msr	BASEPRI, r3
}
 8004c34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	2000000c 	.word	0x2000000c
	...

08004c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c50:	f3ef 8009 	mrs	r0, PSP
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <pxCurrentTCBConst>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	f01e 0f10 	tst.w	lr, #16
 8004c60:	bf08      	it	eq
 8004c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6a:	6010      	str	r0, [r2, #0]
 8004c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c74:	f380 8811 	msr	BASEPRI, r0
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f7ff f9fa 	bl	8004078 <vTaskSwitchContext>
 8004c84:	f04f 0000 	mov.w	r0, #0
 8004c88:	f380 8811 	msr	BASEPRI, r0
 8004c8c:	bc09      	pop	{r0, r3}
 8004c8e:	6819      	ldr	r1, [r3, #0]
 8004c90:	6808      	ldr	r0, [r1, #0]
 8004c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c96:	f01e 0f10 	tst.w	lr, #16
 8004c9a:	bf08      	it	eq
 8004c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ca0:	f380 8809 	msr	PSP, r0
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	f3af 8000 	nop.w

08004cb0 <pxCurrentTCBConst>:
 8004cb0:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop

08004cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	607b      	str	r3, [r7, #4]
}
 8004cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004cd2:	f7ff f919 	bl	8003f08 <xTaskIncrementTick>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cdc:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <xPortSysTickHandler+0x40>)
 8004cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f383 8811 	msr	BASEPRI, r3
}
 8004cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	e000ed04 	.word	0xe000ed04

08004cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d00:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <vPortSetupTimerInterrupt+0x34>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d06:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <vPortSetupTimerInterrupt+0x38>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <vPortSetupTimerInterrupt+0x3c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <vPortSetupTimerInterrupt+0x40>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <vPortSetupTimerInterrupt+0x44>)
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d1e:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <vPortSetupTimerInterrupt+0x34>)
 8004d20:	2207      	movs	r2, #7
 8004d22:	601a      	str	r2, [r3, #0]
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	e000e010 	.word	0xe000e010
 8004d34:	e000e018 	.word	0xe000e018
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	10624dd3 	.word	0x10624dd3
 8004d40:	e000e014 	.word	0xe000e014

08004d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d54 <vPortEnableVFP+0x10>
 8004d48:	6801      	ldr	r1, [r0, #0]
 8004d4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d4e:	6001      	str	r1, [r0, #0]
 8004d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d52:	bf00      	nop
 8004d54:	e000ed88 	.word	0xe000ed88

08004d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d5e:	f3ef 8305 	mrs	r3, IPSR
 8004d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b0f      	cmp	r3, #15
 8004d68:	d914      	bls.n	8004d94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d6a:	4a17      	ldr	r2, [pc, #92]	; (8004dc8 <vPortValidateInterruptPriority+0x70>)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d74:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <vPortValidateInterruptPriority+0x74>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	7afa      	ldrb	r2, [r7, #11]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d20a      	bcs.n	8004d94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	607b      	str	r3, [r7, #4]
}
 8004d90:	bf00      	nop
 8004d92:	e7fe      	b.n	8004d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d94:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <vPortValidateInterruptPriority+0x78>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <vPortValidateInterruptPriority+0x7c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d90a      	bls.n	8004dba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	603b      	str	r3, [r7, #0]
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <vPortValidateInterruptPriority+0x60>
	}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	e000e3f0 	.word	0xe000e3f0
 8004dcc:	20000440 	.word	0x20000440
 8004dd0:	e000ed0c 	.word	0xe000ed0c
 8004dd4:	20000444 	.word	0x20000444

08004dd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004de4:	f7fe ffd6 	bl	8003d94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004de8:	4b5b      	ldr	r3, [pc, #364]	; (8004f58 <pvPortMalloc+0x180>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004df0:	f000 f920 	bl	8005034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004df4:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <pvPortMalloc+0x184>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f040 8093 	bne.w	8004f28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01d      	beq.n	8004e44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e08:	2208      	movs	r2, #8
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d014      	beq.n	8004e44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f023 0307 	bic.w	r3, r3, #7
 8004e20:	3308      	adds	r3, #8
 8004e22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <pvPortMalloc+0x6c>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	617b      	str	r3, [r7, #20]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d06e      	beq.n	8004f28 <pvPortMalloc+0x150>
 8004e4a:	4b45      	ldr	r3, [pc, #276]	; (8004f60 <pvPortMalloc+0x188>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d869      	bhi.n	8004f28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e54:	4b43      	ldr	r3, [pc, #268]	; (8004f64 <pvPortMalloc+0x18c>)
 8004e56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e58:	4b42      	ldr	r3, [pc, #264]	; (8004f64 <pvPortMalloc+0x18c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e5e:	e004      	b.n	8004e6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d903      	bls.n	8004e7c <pvPortMalloc+0xa4>
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f1      	bne.n	8004e60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e7c:	4b36      	ldr	r3, [pc, #216]	; (8004f58 <pvPortMalloc+0x180>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d050      	beq.n	8004f28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	4413      	add	r3, r2
 8004e8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	1ad2      	subs	r2, r2, r3
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d91f      	bls.n	8004ee8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <pvPortMalloc+0xf8>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	613b      	str	r3, [r7, #16]
}
 8004ecc:	bf00      	nop
 8004ece:	e7fe      	b.n	8004ece <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	1ad2      	subs	r2, r2, r3
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ee2:	69b8      	ldr	r0, [r7, #24]
 8004ee4:	f000 f908 	bl	80050f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ee8:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <pvPortMalloc+0x188>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <pvPortMalloc+0x188>)
 8004ef4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ef6:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <pvPortMalloc+0x188>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <pvPortMalloc+0x190>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d203      	bcs.n	8004f0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f02:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <pvPortMalloc+0x188>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <pvPortMalloc+0x190>)
 8004f08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <pvPortMalloc+0x184>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f1e:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <pvPortMalloc+0x194>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3301      	adds	r3, #1
 8004f24:	4a11      	ldr	r2, [pc, #68]	; (8004f6c <pvPortMalloc+0x194>)
 8004f26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f28:	f7fe ff42 	bl	8003db0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <pvPortMalloc+0x174>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	60fb      	str	r3, [r7, #12]
}
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <pvPortMalloc+0x172>
	return pvReturn;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3728      	adds	r7, #40	; 0x28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20004050 	.word	0x20004050
 8004f5c:	20004064 	.word	0x20004064
 8004f60:	20004054 	.word	0x20004054
 8004f64:	20004048 	.word	0x20004048
 8004f68:	20004058 	.word	0x20004058
 8004f6c:	2000405c 	.word	0x2000405c

08004f70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d04d      	beq.n	800501e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f82:	2308      	movs	r3, #8
 8004f84:	425b      	negs	r3, r3
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4413      	add	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	4b24      	ldr	r3, [pc, #144]	; (8005028 <vPortFree+0xb8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <vPortFree+0x44>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	60fb      	str	r3, [r7, #12]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <vPortFree+0x62>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	60bb      	str	r3, [r7, #8]
}
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <vPortFree+0xb8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01e      	beq.n	800501e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d11a      	bne.n	800501e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <vPortFree+0xb8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	401a      	ands	r2, r3
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ff8:	f7fe fecc 	bl	8003d94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	4b0a      	ldr	r3, [pc, #40]	; (800502c <vPortFree+0xbc>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4413      	add	r3, r2
 8005006:	4a09      	ldr	r2, [pc, #36]	; (800502c <vPortFree+0xbc>)
 8005008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800500a:	6938      	ldr	r0, [r7, #16]
 800500c:	f000 f874 	bl	80050f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005010:	4b07      	ldr	r3, [pc, #28]	; (8005030 <vPortFree+0xc0>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3301      	adds	r3, #1
 8005016:	4a06      	ldr	r2, [pc, #24]	; (8005030 <vPortFree+0xc0>)
 8005018:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800501a:	f7fe fec9 	bl	8003db0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800501e:	bf00      	nop
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20004064 	.word	0x20004064
 800502c:	20004054 	.word	0x20004054
 8005030:	20004060 	.word	0x20004060

08005034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800503a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800503e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <prvHeapInit+0xac>)
 8005042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00c      	beq.n	8005068 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3307      	adds	r3, #7
 8005052:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0307 	bic.w	r3, r3, #7
 800505a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	4a1f      	ldr	r2, [pc, #124]	; (80050e0 <prvHeapInit+0xac>)
 8005064:	4413      	add	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800506c:	4a1d      	ldr	r2, [pc, #116]	; (80050e4 <prvHeapInit+0xb0>)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005072:	4b1c      	ldr	r3, [pc, #112]	; (80050e4 <prvHeapInit+0xb0>)
 8005074:	2200      	movs	r2, #0
 8005076:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	4413      	add	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005080:	2208      	movs	r2, #8
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0307 	bic.w	r3, r3, #7
 800508e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4a15      	ldr	r2, [pc, #84]	; (80050e8 <prvHeapInit+0xb4>)
 8005094:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <prvHeapInit+0xb4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2200      	movs	r2, #0
 800509c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800509e:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <prvHeapInit+0xb4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	1ad2      	subs	r2, r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050b4:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <prvHeapInit+0xb4>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <prvHeapInit+0xb8>)
 80050c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <prvHeapInit+0xbc>)
 80050ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050cc:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <prvHeapInit+0xc0>)
 80050ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	20000448 	.word	0x20000448
 80050e4:	20004048 	.word	0x20004048
 80050e8:	20004050 	.word	0x20004050
 80050ec:	20004058 	.word	0x20004058
 80050f0:	20004054 	.word	0x20004054
 80050f4:	20004064 	.word	0x20004064

080050f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005100:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <prvInsertBlockIntoFreeList+0xac>)
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	e002      	b.n	800510c <prvInsertBlockIntoFreeList+0x14>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	429a      	cmp	r2, r3
 8005114:	d8f7      	bhi.n	8005106 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	4413      	add	r3, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	429a      	cmp	r2, r3
 8005126:	d108      	bne.n	800513a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	441a      	add	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	441a      	add	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d118      	bne.n	8005180 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d00d      	beq.n	8005176 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	441a      	add	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	e008      	b.n	8005188 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005176:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	e003      	b.n	8005188 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	d002      	beq.n	8005196 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20004048 	.word	0x20004048
 80051a8:	20004050 	.word	0x20004050

080051ac <memset>:
 80051ac:	4402      	add	r2, r0
 80051ae:	4603      	mov	r3, r0
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d100      	bne.n	80051b6 <memset+0xa>
 80051b4:	4770      	bx	lr
 80051b6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ba:	e7f9      	b.n	80051b0 <memset+0x4>

080051bc <__libc_init_array>:
 80051bc:	b570      	push	{r4, r5, r6, lr}
 80051be:	4d0d      	ldr	r5, [pc, #52]	; (80051f4 <__libc_init_array+0x38>)
 80051c0:	4c0d      	ldr	r4, [pc, #52]	; (80051f8 <__libc_init_array+0x3c>)
 80051c2:	1b64      	subs	r4, r4, r5
 80051c4:	10a4      	asrs	r4, r4, #2
 80051c6:	2600      	movs	r6, #0
 80051c8:	42a6      	cmp	r6, r4
 80051ca:	d109      	bne.n	80051e0 <__libc_init_array+0x24>
 80051cc:	4d0b      	ldr	r5, [pc, #44]	; (80051fc <__libc_init_array+0x40>)
 80051ce:	4c0c      	ldr	r4, [pc, #48]	; (8005200 <__libc_init_array+0x44>)
 80051d0:	f000 f826 	bl	8005220 <_init>
 80051d4:	1b64      	subs	r4, r4, r5
 80051d6:	10a4      	asrs	r4, r4, #2
 80051d8:	2600      	movs	r6, #0
 80051da:	42a6      	cmp	r6, r4
 80051dc:	d105      	bne.n	80051ea <__libc_init_array+0x2e>
 80051de:	bd70      	pop	{r4, r5, r6, pc}
 80051e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e4:	4798      	blx	r3
 80051e6:	3601      	adds	r6, #1
 80051e8:	e7ee      	b.n	80051c8 <__libc_init_array+0xc>
 80051ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ee:	4798      	blx	r3
 80051f0:	3601      	adds	r6, #1
 80051f2:	e7f2      	b.n	80051da <__libc_init_array+0x1e>
 80051f4:	080052bc 	.word	0x080052bc
 80051f8:	080052bc 	.word	0x080052bc
 80051fc:	080052bc 	.word	0x080052bc
 8005200:	080052c0 	.word	0x080052c0

08005204 <memcpy>:
 8005204:	440a      	add	r2, r1
 8005206:	4291      	cmp	r1, r2
 8005208:	f100 33ff 	add.w	r3, r0, #4294967295
 800520c:	d100      	bne.n	8005210 <memcpy+0xc>
 800520e:	4770      	bx	lr
 8005210:	b510      	push	{r4, lr}
 8005212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800521a:	4291      	cmp	r1, r2
 800521c:	d1f9      	bne.n	8005212 <memcpy+0xe>
 800521e:	bd10      	pop	{r4, pc}

08005220 <_init>:
 8005220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005222:	bf00      	nop
 8005224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005226:	bc08      	pop	{r3}
 8005228:	469e      	mov	lr, r3
 800522a:	4770      	bx	lr

0800522c <_fini>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	bf00      	nop
 8005230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005232:	bc08      	pop	{r3}
 8005234:	469e      	mov	lr, r3
 8005236:	4770      	bx	lr
